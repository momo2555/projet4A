
valtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005824  08005824  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005824  08005824  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005824  08005824  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800582c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000070  0800589c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800589c  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc51  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002312  00000000  00000000  0002fcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00032008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00032e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b461  00000000  00000000  00033c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010129  00000000  00000000  0004f061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a54fc  00000000  00000000  0005f18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104686  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b0  00000000  00000000  001046dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005760 	.word	0x08005760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005760 	.word	0x08005760

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08e      	sub	sp, #56	; 0x38
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  uint8_t MSG[50] = {'\0'};
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	222e      	movs	r2, #46	; 0x2e
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f004 fe36 	bl	8004ef4 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 fd84 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f834 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f000 fa9e 	bl	80007d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000294:	f000 f970 	bl	8000578 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000298:	f000 f8b6 	bl	8000408 <MX_TIM1_Init>
  MX_TIM3_Init();
 800029c:	f000 f9c0 	bl	8000620 <MX_TIM3_Init>
  MX_TIM7_Init();
 80002a0:	f000 fa14 	bl	80006cc <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80002a4:	f000 fa4c 	bl	8000740 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80002a8:	f000 f87a 	bl	80003a0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  //initialisation
  //HAL_UART_
  HAL_TIM_Encoder_Init(&htim1, TIM_CHANNEL_ALL); //initialisation des encodeurs
 80002ac:	213c      	movs	r1, #60	; 0x3c
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <main+0x74>)
 80002b0:	f002 fdd5 	bl	8002e5e <HAL_TIM_Encoder_Init>
  HAL_TIM_Base_Start(&htim7); // active le timer 7
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <main+0x78>)
 80002b6:	f002 fcc1 	bl	8002c3c <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT (&huart2, &byte, 1);
 80002ba:	2201      	movs	r2, #1
 80002bc:	490b      	ldr	r1, [pc, #44]	; (80002ec <main+0x7c>)
 80002be:	480c      	ldr	r0, [pc, #48]	; (80002f0 <main+0x80>)
 80002c0:	f003 ff2e 	bl	8004120 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(MSG, "All Right\n\r");
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	490b      	ldr	r1, [pc, #44]	; (80002f4 <main+0x84>)
 80002c8:	4618      	mov	r0, r3
 80002ca:	f004 fed5 	bl	8005078 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80002ce:	1d39      	adds	r1, r7, #4
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	2232      	movs	r2, #50	; 0x32
 80002d4:	4806      	ldr	r0, [pc, #24]	; (80002f0 <main+0x80>)
 80002d6:	f003 fe8f 	bl	8003ff8 <HAL_UART_Transmit>
	  HAL_Delay(300);
 80002da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002de:	f000 fdbf 	bl	8000e60 <HAL_Delay>
  {
 80002e2:	e7ef      	b.n	80002c4 <main+0x54>
 80002e4:	20000110 	.word	0x20000110
 80002e8:	2000022c 	.word	0x2000022c
 80002ec:	2000010c 	.word	0x2000010c
 80002f0:	200001a8 	.word	0x200001a8
 80002f4:	08005778 	.word	0x08005778

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b096      	sub	sp, #88	; 0x58
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000302:	2228      	movs	r2, #40	; 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f004 fdf4 	bl	8004ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	f107 031c 	add.w	r3, r7, #28
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]
 800032a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	2302      	movs	r3, #2
 800032e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	2301      	movs	r3, #1
 8000332:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000334:	2310      	movs	r3, #16
 8000336:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	2300      	movs	r3, #0
 800033a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000340:	4618      	mov	r0, r3
 8000342:	f001 f9bf 	bl	80016c4 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800034c:	f000 fac6 	bl	80008dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000364:	f107 031c 	add.w	r3, r7, #28
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f002 f8b2 	bl	80024d4 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000376:	f000 fab1 	bl	80008dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800037a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000380:	2300      	movs	r3, #0
 8000382:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4618      	mov	r0, r3
 8000388:	f002 fada 	bl	8002940 <HAL_RCCEx_PeriphCLKConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000392:	f000 faa3 	bl	80008dc <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3758      	adds	r7, #88	; 0x58
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <MX_CAN_Init+0x60>)
 80003a6:	4a17      	ldr	r2, [pc, #92]	; (8000404 <MX_CAN_Init+0x64>)
 80003a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_CAN_Init+0x60>)
 80003ac:	2210      	movs	r2, #16
 80003ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_CAN_Init+0x60>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_CAN_Init+0x60>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <MX_CAN_Init+0x60>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_CAN_Init+0x60>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <MX_CAN_Init+0x60>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_CAN_Init+0x60>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <MX_CAN_Init+0x60>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_CAN_Init+0x60>)
 80003dc:	2200      	movs	r2, #0
 80003de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <MX_CAN_Init+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_CAN_Init+0x60>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <MX_CAN_Init+0x60>)
 80003ee:	f000 fd5b 	bl	8000ea8 <HAL_CAN_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 fa70 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000098 	.word	0x20000098
 8000404:	40006400 	.word	0x40006400

08000408 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b09a      	sub	sp, #104	; 0x68
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
 8000438:	615a      	str	r2, [r3, #20]
 800043a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	222c      	movs	r2, #44	; 0x2c
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f004 fd56 	bl	8004ef4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000448:	4b49      	ldr	r3, [pc, #292]	; (8000570 <MX_TIM1_Init+0x168>)
 800044a:	4a4a      	ldr	r2, [pc, #296]	; (8000574 <MX_TIM1_Init+0x16c>)
 800044c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 800044e:	4b48      	ldr	r3, [pc, #288]	; (8000570 <MX_TIM1_Init+0x168>)
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	4b46      	ldr	r3, [pc, #280]	; (8000570 <MX_TIM1_Init+0x168>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800045a:	4b45      	ldr	r3, [pc, #276]	; (8000570 <MX_TIM1_Init+0x168>)
 800045c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000460:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000462:	4b43      	ldr	r3, [pc, #268]	; (8000570 <MX_TIM1_Init+0x168>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000468:	4b41      	ldr	r3, [pc, #260]	; (8000570 <MX_TIM1_Init+0x168>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800046e:	4b40      	ldr	r3, [pc, #256]	; (8000570 <MX_TIM1_Init+0x168>)
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000474:	483e      	ldr	r0, [pc, #248]	; (8000570 <MX_TIM1_Init+0x168>)
 8000476:	f002 fb89 	bl	8002b8c <HAL_TIM_Base_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000480:	f000 fa2c 	bl	80008dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000488:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800048a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800048e:	4619      	mov	r1, r3
 8000490:	4837      	ldr	r0, [pc, #220]	; (8000570 <MX_TIM1_Init+0x168>)
 8000492:	f002 ffb9 	bl	8003408 <HAL_TIM_ConfigClockSource>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800049c:	f000 fa1e 	bl	80008dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004a0:	4833      	ldr	r0, [pc, #204]	; (8000570 <MX_TIM1_Init+0x168>)
 80004a2:	f002 fc7b 	bl	8002d9c <HAL_TIM_PWM_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80004ac:	f000 fa16 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	2300      	movs	r3, #0
 80004b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004c0:	4619      	mov	r1, r3
 80004c2:	482b      	ldr	r0, [pc, #172]	; (8000570 <MX_TIM1_Init+0x168>)
 80004c4:	f003 fc46 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80004ce:	f000 fa05 	bl	80008dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d2:	2360      	movs	r3, #96	; 0x60
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004da:	2300      	movs	r3, #0
 80004dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004de:	2300      	movs	r3, #0
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004e6:	2300      	movs	r3, #0
 80004e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004ea:	2300      	movs	r3, #0
 80004ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f2:	2200      	movs	r2, #0
 80004f4:	4619      	mov	r1, r3
 80004f6:	481e      	ldr	r0, [pc, #120]	; (8000570 <MX_TIM1_Init+0x168>)
 80004f8:	f002 fe76 	bl	80031e8 <HAL_TIM_PWM_ConfigChannel>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000502:	f000 f9eb 	bl	80008dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050a:	2204      	movs	r2, #4
 800050c:	4619      	mov	r1, r3
 800050e:	4818      	ldr	r0, [pc, #96]	; (8000570 <MX_TIM1_Init+0x168>)
 8000510:	f002 fe6a 	bl	80031e8 <HAL_TIM_PWM_ConfigChannel>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800051a:	f000 f9df 	bl	80008dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000536:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	4619      	mov	r1, r3
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <MX_TIM1_Init+0x168>)
 8000554:	f003 fc6c 	bl	8003e30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800055e:	f000 f9bd 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <MX_TIM1_Init+0x168>)
 8000564:	f000 fad4 	bl	8000b10 <HAL_TIM_MspPostInit>

}
 8000568:	bf00      	nop
 800056a:	3768      	adds	r7, #104	; 0x68
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000110 	.word	0x20000110
 8000574:	40012c00 	.word	0x40012c00

08000578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08c      	sub	sp, #48	; 0x30
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2224      	movs	r2, #36	; 0x24
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fcb4 	bl	8004ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <MX_TIM2_Init+0xa4>)
 8000598:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800059c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_TIM2_Init+0xa4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <MX_TIM2_Init+0xa4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_TIM2_Init+0xa4>)
 80005ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_TIM2_Init+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_TIM2_Init+0xa4>)
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005be:	2303      	movs	r3, #3
 80005c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005d6:	2301      	movs	r3, #1
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <MX_TIM2_Init+0xa4>)
 80005ea:	f002 fc38 	bl	8002e5e <HAL_TIM_Encoder_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80005f4:	f000 f972 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_TIM2_Init+0xa4>)
 8000606:	f003 fba5 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000610:	f000 f964 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	3730      	adds	r7, #48	; 0x30
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000015c 	.word	0x2000015c

08000620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08c      	sub	sp, #48	; 0x30
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2224      	movs	r2, #36	; 0x24
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 fc60 	bl	8004ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_TIM3_Init+0xa4>)
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_TIM3_Init+0xa8>)
 8000642:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_TIM3_Init+0xa4>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_TIM3_Init+0xa4>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_TIM3_Init+0xa4>)
 8000652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_TIM3_Init+0xa4>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_TIM3_Init+0xa4>)
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000664:	2303      	movs	r3, #3
 8000666:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800066c:	2301      	movs	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800067c:	2301      	movs	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	480d      	ldr	r0, [pc, #52]	; (80006c4 <MX_TIM3_Init+0xa4>)
 8000690:	f002 fbe5 	bl	8002e5e <HAL_TIM_Encoder_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800069a:	f000 f91f 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <MX_TIM3_Init+0xa4>)
 80006ac:	f003 fb52 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80006b6:	f000 f911 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	3730      	adds	r7, #48	; 0x30
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000c0 	.word	0x200000c0
 80006c8:	40000400 	.word	0x40000400

080006cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_TIM7_Init+0x6c>)
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_TIM7_Init+0x70>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_TIM7_Init+0x6c>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_TIM7_Init+0x6c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_TIM7_Init+0x6c>)
 80006f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_TIM7_Init+0x6c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <MX_TIM7_Init+0x6c>)
 80006fe:	f002 fa45 	bl	8002b8c <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000708:	f000 f8e8 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <MX_TIM7_Init+0x6c>)
 800071a:	f003 fb1b 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000724:	f000 f8da 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM7_Init+0x6c>)
 800072a:	f002 fadb 	bl	8002ce4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000022c 	.word	0x2000022c
 800073c:	40001400 	.word	0x40001400

08000740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	__USART2_CLK_ENABLE();
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_USART2_UART_Init+0x84>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <MX_USART2_UART_Init+0x84>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_USART2_UART_Init+0x84>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 8000760:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <MX_USART2_UART_Init+0x8c>)
 8000762:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 8000766:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 8000780:	220c      	movs	r2, #12
 8000782:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <MX_USART2_UART_Init+0x88>)
 800079e:	f003 fbdd 	bl	8003f5c <HAL_UART_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80007a8:	f000 f898 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2026      	movs	r0, #38	; 0x26
 80007b2:	f000 fd50 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007b6:	2026      	movs	r0, #38	; 0x26
 80007b8:	f000 fd69 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001a8 	.word	0x200001a8
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_GPIO_Init+0x8c>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_GPIO_Init+0x8c>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_GPIO_Init+0x8c>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_GPIO_Init+0x8c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <MX_GPIO_Init+0x8c>)
 8000804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_GPIO_Init+0x8c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	21e8      	movs	r1, #232	; 0xe8
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <MX_GPIO_Init+0x90>)
 800081c:	f000 ff3a 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000820:	2303      	movs	r3, #3
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0x90>)
 8000834:	f000 fdbc 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000838:	23e8      	movs	r3, #232	; 0xe8
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0x90>)
 8000850:	f000 fdae 	bl	80013b0 <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400

08000864 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

    char test[] = "tim7 interruption\n\r";
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800086e:	f107 040c 	add.w	r4, r7, #12
 8000872:	461d      	mov	r5, r3
 8000874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, test, sizeof(test), 100);
 800087c:	f107 010c 	add.w	r1, r7, #12
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	2214      	movs	r2, #20
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000886:	f003 fbb7 	bl	8003ff8 <HAL_UART_Transmit>
}
 800088a:	bf00      	nop
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bdb0      	pop	{r4, r5, r7, pc}
 8000892:	bf00      	nop
 8000894:	08005784 	.word	0x08005784
 8000898:	200001a8 	.word	0x200001a8

0800089c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b087      	sub	sp, #28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	char test[] = "seial receive\n\r";
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_UART_RxCpltCallback+0x34>)
 80008a6:	f107 0408 	add.w	r4, r7, #8
 80008aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart2, test, sizeof(test), 100);
 80008b0:	f107 0108 	add.w	r1, r7, #8
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	2210      	movs	r2, #16
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <HAL_UART_RxCpltCallback+0x38>)
 80008ba:	f003 fb9d 	bl	8003ff8 <HAL_UART_Transmit>

    HAL_UART_Receive_IT(&huart2, &byte, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	4905      	ldr	r1, [pc, #20]	; (80008d8 <HAL_UART_RxCpltCallback+0x3c>)
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <HAL_UART_RxCpltCallback+0x38>)
 80008c4:	f003 fc2c 	bl	8004120 <HAL_UART_Receive_IT>
}
 80008c8:	bf00      	nop
 80008ca:	371c      	adds	r7, #28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd90      	pop	{r4, r7, pc}
 80008d0:	08005798 	.word	0x08005798
 80008d4:	200001a8 	.word	0x200001a8
 80008d8:	2000010c 	.word	0x2000010c

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x44>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_MspInit+0x44>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_MspInit+0x44>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x44>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x44>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x44>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <HAL_CAN_MspInit+0x80>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d129      	bne.n	80009a6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_CAN_MspInit+0x84>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_CAN_MspInit+0x84>)
 8000958:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_CAN_MspInit+0x84>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_CAN_MspInit+0x84>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <HAL_CAN_MspInit+0x84>)
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_CAN_MspInit+0x84>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000994:	2309      	movs	r3, #9
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 fd05 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40006400 	.word	0x40006400
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <HAL_TIM_Base_MspInit+0x68>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d10c      	bne.n	80009e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_TIM_Base_MspInit+0x6c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <HAL_TIM_Base_MspInit+0x6c>)
 80009d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_TIM_Base_MspInit+0x6c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80009e2:	e018      	b.n	8000a16 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_TIM_Base_MspInit+0x70>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d113      	bne.n	8000a16 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_TIM_Base_MspInit+0x6c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <HAL_TIM_Base_MspInit+0x6c>)
 80009f4:	f043 0320 	orr.w	r3, r3, #32
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_TIM_Base_MspInit+0x6c>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2037      	movs	r0, #55	; 0x37
 8000a0c:	f000 fc23 	bl	8001256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000a10:	2037      	movs	r0, #55	; 0x37
 8000a12:	f000 fc3c 	bl	800128e <HAL_NVIC_EnableIRQ>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40001400 	.word	0x40001400

08000a2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a4c:	d129      	bne.n	8000aa2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a2d      	ldr	r2, [pc, #180]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fc88 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aa0:	e02d      	b.n	8000afe <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d128      	bne.n	8000afe <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	61d3      	str	r3, [r2, #28]
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ace:	6153      	str	r3, [r2, #20]
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000adc:	23c0      	movs	r3, #192	; 0xc0
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 fc59 	bl	80013b0 <HAL_GPIO_Init>
}
 8000afe:	bf00      	nop
 8000b00:	3730      	adds	r7, #48	; 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40000400 	.word	0x40000400

08000b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d11d      	bne.n	8000b6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_TIM_MspPostInit+0x6c>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <HAL_TIM_MspPostInit+0x6c>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6153      	str	r3, [r2, #20]
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_TIM_MspPostInit+0x6c>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fc21 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40012c00 	.word	0x40012c00
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <HAL_UART_MspInit+0x8c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d130      	bne.n	8000c04 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be2:	2307      	movs	r3, #7
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f000 fbde 	bl	80013b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2026      	movs	r0, #38	; 0x26
 8000bfa:	f000 fb2c 	bl	8001256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bfe:	2026      	movs	r0, #38	; 0x26
 8000c00:	f000 fb45 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	40021000 	.word	0x40021000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f8de 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	char test[] = "seial receive\n\r";
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <USART2_IRQHandler+0x2c>)
 8000c70:	463c      	mov	r4, r7
 8000c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart2, test, sizeof(test), 100);
 8000c78:	4639      	mov	r1, r7
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	2210      	movs	r2, #16
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <USART2_IRQHandler+0x30>)
 8000c80:	f003 f9ba 	bl	8003ff8 <HAL_UART_Transmit>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <USART2_IRQHandler+0x30>)
 8000c86:	f003 fa89 	bl	800419c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	bf00      	nop
 8000c94:	080057a8 	.word	0x080057a8
 8000c98:	200001a8 	.word	0x200001a8

08000c9c <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */
	//char test[] = "tim7 interrupt enable\n\r";
		//	HAL_UART_Transmit(&huart2, test, sizeof(test), 100);
  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <TIM7_DAC2_IRQHandler+0x10>)
 8000ca2:	f002 f982 	bl	8002faa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000022c 	.word	0x2000022c

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f004 f8de 	bl	8004ea0 <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20003000 	.word	0x20003000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	2000008c 	.word	0x2000008c
 8000d18:	20000290 	.word	0x20000290

08000d1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490e      	ldr	r1, [pc, #56]	; (8000d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0b      	ldr	r4, [pc, #44]	; (8000d8c <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d6a:	f7ff ffd7 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f004 f89d 	bl	8004eac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d72:	f7ff fa7d 	bl	8000270 <main>

08000d76 <LoopForever>:

LoopForever:
    b LoopForever
 8000d76:	e7fe      	b.n	8000d76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d78:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d84:	0800582c 	.word	0x0800582c
  ldr r2, =_sbss
 8000d88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d8c:	2000028c 	.word	0x2000028c

08000d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_2_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x28>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 fa4b 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fd9a 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fa63 	bl	80012aa <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 fa2b 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000278 	.word	0x20000278

08000e48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000278 	.word	0x20000278

08000e60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0ed      	b.n	8001096 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fd32 	bl	8000930 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0202 	bic.w	r2, r2, #2
 8000eda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000edc:	f7ff ffb4 	bl	8000e48 <HAL_GetTick>
 8000ee0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ee2:	e012      	b.n	8000f0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee4:	f7ff ffb0 	bl	8000e48 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b0a      	cmp	r3, #10
 8000ef0:	d90b      	bls.n	8000f0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2205      	movs	r2, #5
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0c5      	b.n	8001096 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1e5      	bne.n	8000ee4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0201 	orr.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f28:	f7ff ff8e 	bl	8000e48 <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f2e:	e012      	b.n	8000f56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f30:	f7ff ff8a 	bl	8000e48 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d90b      	bls.n	8000f56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e09f      	b.n	8001096 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0e5      	beq.n	8000f30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7e1b      	ldrb	r3, [r3, #24]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d108      	bne.n	8000f7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e007      	b.n	8000f8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7e5b      	ldrb	r3, [r3, #25]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d108      	bne.n	8000fa8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e007      	b.n	8000fb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e9b      	ldrb	r3, [r3, #26]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d108      	bne.n	8000fd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0220 	orr.w	r2, r2, #32
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e007      	b.n	8000fe2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0220 	bic.w	r2, r2, #32
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7edb      	ldrb	r3, [r3, #27]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d108      	bne.n	8000ffc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0210 	bic.w	r2, r2, #16
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e007      	b.n	800100c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0210 	orr.w	r2, r2, #16
 800100a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7f1b      	ldrb	r3, [r3, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0208 	orr.w	r2, r2, #8
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e007      	b.n	8001036 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0208 	bic.w	r2, r2, #8
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7f5b      	ldrb	r3, [r3, #29]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0204 	orr.w	r2, r2, #4
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e007      	b.n	8001060 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0204 	bic.w	r2, r2, #4
 800105e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	ea42 0103 	orr.w	r1, r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	db0b      	blt.n	800112e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 021f 	and.w	r2, r3, #31
 800111c:	4907      	ldr	r1, [pc, #28]	; (800113c <__NVIC_EnableIRQ+0x38>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	2001      	movs	r0, #1
 8001126:	fa00 f202 	lsl.w	r2, r0, r2
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff29 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff3e 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff8e 	bl	8001194 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5d 	bl	8001140 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff31 	bl	8001104 <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffa2 	bl	80011fc <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2204      	movs	r2, #4
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e020      	b.n	8001328 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 020e 	bic.w	r2, r2, #14
 80012f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001346:	2b02      	cmp	r3, #2
 8001348:	d005      	beq.n	8001356 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2204      	movs	r2, #4
 800134e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e027      	b.n	80013a6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 020e 	bic.w	r2, r2, #14
 8001364:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0201 	bic.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4798      	blx	r3
    } 
  }
  return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	e14e      	b.n	800165e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8140 	beq.w	8001658 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d00b      	beq.n	80013f8 <HAL_GPIO_Init+0x48>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ec:	2b11      	cmp	r3, #17
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b12      	cmp	r3, #18
 80013f6:	d130      	bne.n	800145a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800142e:	2201      	movs	r2, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f003 0201 	and.w	r2, r3, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0xea>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b12      	cmp	r3, #18
 8001498:	d123      	bne.n	80014e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	6939      	ldr	r1, [r7, #16]
 80014de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0203 	and.w	r2, r3, #3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 809a 	beq.w	8001658 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001524:	4b55      	ldr	r3, [pc, #340]	; (800167c <HAL_GPIO_Init+0x2cc>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a54      	ldr	r2, [pc, #336]	; (800167c <HAL_GPIO_Init+0x2cc>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <HAL_GPIO_Init+0x2cc>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800153c:	4a50      	ldr	r2, [pc, #320]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001566:	d013      	beq.n	8001590 <HAL_GPIO_Init+0x1e0>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a46      	ldr	r2, [pc, #280]	; (8001684 <HAL_GPIO_Init+0x2d4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d00d      	beq.n	800158c <HAL_GPIO_Init+0x1dc>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a45      	ldr	r2, [pc, #276]	; (8001688 <HAL_GPIO_Init+0x2d8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d007      	beq.n	8001588 <HAL_GPIO_Init+0x1d8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a44      	ldr	r2, [pc, #272]	; (800168c <HAL_GPIO_Init+0x2dc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_GPIO_Init+0x1d4>
 8001580:	2303      	movs	r3, #3
 8001582:	e006      	b.n	8001592 <HAL_GPIO_Init+0x1e2>
 8001584:	2305      	movs	r3, #5
 8001586:	e004      	b.n	8001592 <HAL_GPIO_Init+0x1e2>
 8001588:	2302      	movs	r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x1e2>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_GPIO_Init+0x1e2>
 8001590:	2300      	movs	r3, #0
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	f002 0203 	and.w	r2, r2, #3
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	4093      	lsls	r3, r2
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015a2:	4937      	ldr	r1, [pc, #220]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <HAL_GPIO_Init+0x2e0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015d4:	4a2e      	ldr	r2, [pc, #184]	; (8001690 <HAL_GPIO_Init+0x2e0>)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_GPIO_Init+0x2e0>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015fe:	4a24      	ldr	r2, [pc, #144]	; (8001690 <HAL_GPIO_Init+0x2e0>)
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <HAL_GPIO_Init+0x2e0>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001628:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_GPIO_Init+0x2e0>)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_GPIO_Init+0x2e0>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001652:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <HAL_GPIO_Init+0x2e0>)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	f47f aea9 	bne.w	80013c0 <HAL_GPIO_Init+0x10>
  }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	48000400 	.word	0x48000400
 8001688:	48000800 	.word	0x48000800
 800168c:	48000c00 	.word	0x48000c00
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a4:	787b      	ldrb	r3, [r7, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	f000 bef4 	b.w	80024c6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 816a 	beq.w	80019c2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016ee:	4bb3      	ldr	r3, [pc, #716]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d00c      	beq.n	8001714 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016fa:	4bb0      	ldr	r3, [pc, #704]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d159      	bne.n	80017ba <HAL_RCC_OscConfig+0xf6>
 8001706:	4bad      	ldr	r3, [pc, #692]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001712:	d152      	bne.n	80017ba <HAL_RCC_OscConfig+0xf6>
 8001714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001718:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001720:	fa93 f3a3 	rbit	r3, r3
 8001724:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001728:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0x82>
 8001740:	4b9e      	ldr	r3, [pc, #632]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0xae>
 8001746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800175a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001762:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800176e:	4b93      	ldr	r3, [pc, #588]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001776:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800177a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800177e:	fa92 f2a2 	rbit	r2, r2
 8001782:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001786:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800178a:	fab2 f282 	clz	r2, r2
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	f042 0220 	orr.w	r2, r2, #32
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	f002 021f 	and.w	r2, r2, #31
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 810c 	beq.w	80019c0 <HAL_RCC_OscConfig+0x2fc>
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 8106 	bne.w	80019c0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f000 be86 	b.w	80024c6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c4:	d106      	bne.n	80017d4 <HAL_RCC_OscConfig+0x110>
 80017c6:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7c      	ldr	r2, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e030      	b.n	8001836 <HAL_RCC_OscConfig+0x172>
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x134>
 80017de:	4b77      	ldr	r3, [pc, #476]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a76      	ldr	r2, [pc, #472]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80017e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b74      	ldr	r3, [pc, #464]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a73      	ldr	r2, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e01e      	b.n	8001836 <HAL_RCC_OscConfig+0x172>
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001802:	d10c      	bne.n	800181e <HAL_RCC_OscConfig+0x15a>
 8001804:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a6c      	ldr	r2, [pc, #432]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 800180a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a69      	ldr	r2, [pc, #420]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e00b      	b.n	8001836 <HAL_RCC_OscConfig+0x172>
 800181e:	4b67      	ldr	r3, [pc, #412]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a66      	ldr	r2, [pc, #408]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b64      	ldr	r3, [pc, #400]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a63      	ldr	r2, [pc, #396]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001836:	4b61      	ldr	r3, [pc, #388]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	f023 020f 	bic.w	r2, r3, #15
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	495d      	ldr	r1, [pc, #372]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001846:	4313      	orrs	r3, r2
 8001848:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d059      	beq.n	8001908 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff faf8 	bl	8000e48 <HAL_GetTick>
 8001858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185e:	f7ff faf3 	bl	8000e48 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d902      	bls.n	8001874 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	f000 be29 	b.w	80024c6 <HAL_RCC_OscConfig+0xe02>
 8001874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001878:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001888:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b01      	cmp	r3, #1
 800189e:	d102      	bne.n	80018a6 <HAL_RCC_OscConfig+0x1e2>
 80018a0:	4b46      	ldr	r3, [pc, #280]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x20e>
 80018a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018c2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018de:	fa92 f2a2 	rbit	r2, r2
 80018e2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80018e6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018ea:	fab2 f282 	clz	r2, r2
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	f042 0220 	orr.w	r2, r2, #32
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	f002 021f 	and.w	r2, r2, #31
 80018fa:	2101      	movs	r1, #1
 80018fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001900:	4013      	ands	r3, r2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ab      	beq.n	800185e <HAL_RCC_OscConfig+0x19a>
 8001906:	e05c      	b.n	80019c2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fa9e 	bl	8000e48 <HAL_GetTick>
 800190c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001912:	f7ff fa99 	bl	8000e48 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d902      	bls.n	8001928 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	f000 bdcf 	b.w	80024c6 <HAL_RCC_OscConfig+0xe02>
 8001928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800193c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d102      	bne.n	800195a <HAL_RCC_OscConfig+0x296>
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e015      	b.n	8001986 <HAL_RCC_OscConfig+0x2c2>
 800195a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800196e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001972:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001976:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_RCC_OscConfig+0x2f8>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800198a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800198e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001992:	fa92 f2a2 	rbit	r2, r2
 8001996:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800199a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800199e:	fab2 f282 	clz	r2, r2
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	f042 0220 	orr.w	r2, r2, #32
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	f002 021f 	and.w	r2, r2, #31
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1ab      	bne.n	8001912 <HAL_RCC_OscConfig+0x24e>
 80019ba:	e002      	b.n	80019c2 <HAL_RCC_OscConfig+0x2fe>
 80019bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 816f 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019d2:	4bd0      	ldr	r3, [pc, #832]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019de:	4bcd      	ldr	r3, [pc, #820]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d16c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x400>
 80019ea:	4bca      	ldr	r3, [pc, #808]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d166      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x400>
 80019f6:	2302      	movs	r3, #2
 80019f8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d102      	bne.n	8001a26 <HAL_RCC_OscConfig+0x362>
 8001a20:	4bbc      	ldr	r3, [pc, #752]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	e013      	b.n	8001a4e <HAL_RCC_OscConfig+0x38a>
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a4a:	4bb2      	ldr	r3, [pc, #712]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a54:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a58:	fa92 f2a2 	rbit	r2, r2
 8001a5c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a60:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a64:	fab2 f282 	clz	r2, r2
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	f042 0220 	orr.w	r2, r2, #32
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f002 021f 	and.w	r2, r2, #31
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_RCC_OscConfig+0x3cc>
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f000 bd1b 	b.w	80024c6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a90:	4ba0      	ldr	r3, [pc, #640]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	21f8      	movs	r1, #248	; 0xf8
 8001aa0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001aa8:	fa91 f1a1 	rbit	r1, r1
 8001aac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ab0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ab4:	fab1 f181 	clz	r1, r1
 8001ab8:	b2c9      	uxtb	r1, r1
 8001aba:	408b      	lsls	r3, r1
 8001abc:	4995      	ldr	r1, [pc, #596]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	e0f5      	b.n	8001cb0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8085 	beq.w	8001bda <HAL_RCC_OscConfig+0x516>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ae2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	461a      	mov	r2, r3
 8001af8:	2301      	movs	r3, #1
 8001afa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff f9a4 	bl	8000e48 <HAL_GetTick>
 8001b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff f99f 	bl	8000e48 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d902      	bls.n	8001b1c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	f000 bcd5 	b.w	80024c6 <HAL_RCC_OscConfig+0xe02>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_OscConfig+0x488>
 8001b46:	4b73      	ldr	r3, [pc, #460]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e013      	b.n	8001b74 <HAL_RCC_OscConfig+0x4b0>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b70:	4b68      	ldr	r3, [pc, #416]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	2202      	movs	r2, #2
 8001b76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b7e:	fa92 f2a2 	rbit	r2, r2
 8001b82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b8a:	fab2 f282 	clz	r2, r2
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f042 0220 	orr.w	r2, r2, #32
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f002 021f 	and.w	r2, r2, #31
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0af      	beq.n	8001b06 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	21f8      	movs	r1, #248	; 0xf8
 8001bb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bbe:	fa91 f1a1 	rbit	r1, r1
 8001bc2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001bc6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001bca:	fab1 f181 	clz	r1, r1
 8001bce:	b2c9      	uxtb	r1, r1
 8001bd0:	408b      	lsls	r3, r1
 8001bd2:	4950      	ldr	r1, [pc, #320]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e06a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x5ec>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001bec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	461a      	mov	r2, r3
 8001c02:	2300      	movs	r3, #0
 8001c04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff f91f 	bl	8000e48 <HAL_GetTick>
 8001c0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c10:	f7ff f91a 	bl	8000e48 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d902      	bls.n	8001c26 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	f000 bc50 	b.w	80024c6 <HAL_RCC_OscConfig+0xe02>
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d102      	bne.n	8001c56 <HAL_RCC_OscConfig+0x592>
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	e013      	b.n	8001c7e <HAL_RCC_OscConfig+0x5ba>
 8001c56:	2302      	movs	r3, #2
 8001c58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_RCC_OscConfig+0x650>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c84:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c88:	fa92 f2a2 	rbit	r2, r2
 8001c8c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c90:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c94:	fab2 f282 	clz	r2, r2
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f042 0220 	orr.w	r2, r2, #32
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	f002 021f 	and.w	r2, r2, #31
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1af      	bne.n	8001c10 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80da 	beq.w	8001e74 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d069      	beq.n	8001d9e <HAL_RCC_OscConfig+0x6da>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_OscConfig+0x654>)
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f8a8 	bl	8000e48 <HAL_GetTick>
 8001cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfc:	e00e      	b.n	8001d1c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7ff f8a3 	bl	8000e48 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d906      	bls.n	8001d1c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e3d9      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	10908120 	.word	0x10908120
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	4ba5      	ldr	r3, [pc, #660]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d66:	2102      	movs	r1, #2
 8001d68:	6019      	str	r1, [r3, #0]
 8001d6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f1a3 	rbit	r1, r3
 8001d74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d78:	6019      	str	r1, [r3, #0]
  return result;
 8001d7a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2101      	movs	r1, #1
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0b0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x63a>
 8001d9c:	e06a      	b.n	8001e74 <HAL_RCC_OscConfig+0x7b0>
 8001d9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001db4:	601a      	str	r2, [r3, #0]
  return result;
 8001db6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <HAL_RCC_OscConfig+0x934>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff f83a 	bl	8000e48 <HAL_GetTick>
 8001dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	e009      	b.n	8001dee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dda:	f7ff f835 	bl	8000e48 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e36b      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
 8001dee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001df2:	2202      	movs	r2, #2
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e22:	2202      	movs	r2, #2
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e3e:	2102      	movs	r1, #2
 8001e40:	6019      	str	r1, [r3, #0]
 8001e42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f1a3 	rbit	r1, r3
 8001e4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e50:	6019      	str	r1, [r3, #0]
  return result;
 8001e52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1b2      	bne.n	8001dda <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8158 	beq.w	8002134 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d112      	bne.n	8001ebc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a56      	ldr	r2, [pc, #344]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b54      	ldr	r3, [pc, #336]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <HAL_RCC_OscConfig+0x938>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11a      	bne.n	8001efe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_RCC_OscConfig+0x938>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_RCC_OscConfig+0x938>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed4:	f7fe ffb8 	bl	8000e48 <HAL_GetTick>
 8001ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	e009      	b.n	8001ef2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ede:	f7fe ffb3 	bl	8000e48 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e2e9      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_RCC_OscConfig+0x938>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0ef      	beq.n	8001ede <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x852>
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e02f      	b.n	8001f76 <HAL_RCC_OscConfig+0x8b2>
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x876>
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a33      	ldr	r2, [pc, #204]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a30      	ldr	r2, [pc, #192]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f32:	f023 0304 	bic.w	r3, r3, #4
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e01d      	b.n	8001f76 <HAL_RCC_OscConfig+0x8b2>
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x89a>
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a2a      	ldr	r2, [pc, #168]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x8b2>
 8001f5e:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a24      	ldr	r2, [pc, #144]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d06b      	beq.n	8002058 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7fe ff62 	bl	8000e48 <HAL_GetTick>
 8001f84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	e00b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe ff5d 	bl	8000e48 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e291      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
 8001fa2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fa93 f2a3 	rbit	r2, r3
 8001fcc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fd0:	601a      	str	r2, [r3, #0]
  return result;
 8001fd2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d109      	bne.n	8002000 <HAL_RCC_OscConfig+0x93c>
 8001fec:	4b01      	ldr	r3, [pc, #4]	; (8001ff4 <HAL_RCC_OscConfig+0x930>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	e014      	b.n	800201c <HAL_RCC_OscConfig+0x958>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	10908120 	.word	0x10908120
 8001ffc:	40007000 	.word	0x40007000
 8002000:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002004:	2202      	movs	r2, #2
 8002006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	4bbb      	ldr	r3, [pc, #748]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002020:	2102      	movs	r1, #2
 8002022:	6011      	str	r1, [r2, #0]
 8002024:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	fa92 f1a2 	rbit	r1, r2
 800202e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002032:	6011      	str	r1, [r2, #0]
  return result;
 8002034:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	fab2 f282 	clz	r2, r2
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	f002 021f 	and.w	r2, r2, #31
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f202 	lsl.w	r2, r1, r2
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d099      	beq.n	8001f8a <HAL_RCC_OscConfig+0x8c6>
 8002056:	e063      	b.n	8002120 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7fe fef6 	bl	8000e48 <HAL_GetTick>
 800205c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	e00b      	b.n	800207a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe fef1 	bl	8000e48 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e225      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
 800207a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800207e:	2202      	movs	r2, #2
 8002080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002096:	2202      	movs	r2, #2
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f2a3 	rbit	r2, r3
 80020a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020a8:	601a      	str	r2, [r3, #0]
  return result;
 80020aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d102      	bne.n	80020ca <HAL_RCC_OscConfig+0xa06>
 80020c4:	4b90      	ldr	r3, [pc, #576]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	e00d      	b.n	80020e6 <HAL_RCC_OscConfig+0xa22>
 80020ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020ce:	2202      	movs	r2, #2
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	fa93 f2a3 	rbit	r2, r3
 80020dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	4b89      	ldr	r3, [pc, #548]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020ea:	2102      	movs	r1, #2
 80020ec:	6011      	str	r1, [r2, #0]
 80020ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	fa92 f1a2 	rbit	r1, r2
 80020f8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80020fc:	6011      	str	r1, [r2, #0]
  return result;
 80020fe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f002 021f 	and.w	r2, r2, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1a0      	bne.n	8002062 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002120:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002128:	4b77      	ldr	r3, [pc, #476]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	4a76      	ldr	r2, [pc, #472]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 800212e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002132:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 81c2 	beq.w	80024c4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002140:	4b71      	ldr	r3, [pc, #452]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	f000 819c 	beq.w	8002486 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b02      	cmp	r3, #2
 8002156:	f040 8114 	bne.w	8002382 <HAL_RCC_OscConfig+0xcbe>
 800215a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800215e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002172:	601a      	str	r2, [r3, #0]
  return result;
 8002174:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002178:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002184:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	461a      	mov	r2, r3
 800218c:	2300      	movs	r3, #0
 800218e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe fe5a 	bl	8000e48 <HAL_GetTick>
 8002194:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002198:	e009      	b.n	80021ae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219a:	f7fe fe55 	bl	8000e48 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e18b      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
 80021ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	fa93 f2a3 	rbit	r2, r3
 80021c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021c6:	601a      	str	r2, [r3, #0]
  return result;
 80021c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d102      	bne.n	80021e8 <HAL_RCC_OscConfig+0xb24>
 80021e2:	4b49      	ldr	r3, [pc, #292]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	e01b      	b.n	8002220 <HAL_RCC_OscConfig+0xb5c>
 80021e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fa93 f2a3 	rbit	r2, r3
 80021fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002206:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002224:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002228:	6011      	str	r1, [r2, #0]
 800222a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	fa92 f1a2 	rbit	r1, r2
 8002234:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002238:	6011      	str	r1, [r2, #0]
  return result;
 800223a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	fab2 f282 	clz	r2, r2
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	f042 0220 	orr.w	r2, r2, #32
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	f002 021f 	and.w	r2, r2, #31
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f202 	lsl.w	r2, r1, r2
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d19e      	bne.n	800219a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225c:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	430b      	orrs	r3, r1
 8002272:	4925      	ldr	r1, [pc, #148]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800227c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002290:	601a      	str	r2, [r3, #0]
  return result;
 8002292:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002296:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	461a      	mov	r2, r3
 80022aa:	2301      	movs	r3, #1
 80022ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe fdcb 	bl	8000e48 <HAL_GetTick>
 80022b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b6:	e009      	b.n	80022cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fdc6 	bl	8000e48 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0fc      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
 80022cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	fa93 f2a3 	rbit	r2, r3
 80022e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022e4:	601a      	str	r2, [r3, #0]
  return result;
 80022e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_RCC_OscConfig+0xc48>
 8002300:	4b01      	ldr	r3, [pc, #4]	; (8002308 <HAL_RCC_OscConfig+0xc44>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	e01e      	b.n	8002344 <HAL_RCC_OscConfig+0xc80>
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800232a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <HAL_RCC_OscConfig+0xe0c>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002348:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800234c:	6011      	str	r1, [r2, #0]
 800234e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	fa92 f1a2 	rbit	r1, r2
 8002358:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800235c:	6011      	str	r1, [r2, #0]
  return result;
 800235e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f042 0220 	orr.w	r2, r2, #32
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f002 021f 	and.w	r2, r2, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d09b      	beq.n	80022b8 <HAL_RCC_OscConfig+0xbf4>
 8002380:	e0a0      	b.n	80024c4 <HAL_RCC_OscConfig+0xe00>
 8002382:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002386:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800238a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	fa93 f2a3 	rbit	r2, r3
 8002396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800239a:	601a      	str	r2, [r3, #0]
  return result;
 800239c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	461a      	mov	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fd46 	bl	8000e48 <HAL_GetTick>
 80023bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	e009      	b.n	80023d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe fd41 	bl	8000e48 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e077      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
 80023d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ee:	601a      	str	r2, [r3, #0]
  return result;
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_RCC_OscConfig+0xd4c>
 800240a:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <HAL_RCC_OscConfig+0xe0c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e01b      	b.n	8002448 <HAL_RCC_OscConfig+0xd84>
 8002410:	f107 0320 	add.w	r3, r7, #32
 8002414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f107 0320 	add.w	r3, r7, #32
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	f107 0318 	add.w	r3, r7, #24
 800242e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	f107 0318 	add.w	r3, r7, #24
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_RCC_OscConfig+0xe0c>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f107 0210 	add.w	r2, r7, #16
 800244c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002450:	6011      	str	r1, [r2, #0]
 8002452:	f107 0210 	add.w	r2, r7, #16
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	fa92 f1a2 	rbit	r1, r2
 800245c:	f107 020c 	add.w	r2, r7, #12
 8002460:	6011      	str	r1, [r2, #0]
  return result;
 8002462:	f107 020c 	add.w	r2, r7, #12
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	fab2 f282 	clz	r2, r2
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f042 0220 	orr.w	r2, r2, #32
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f002 021f 	and.w	r2, r2, #31
 8002478:	2101      	movs	r1, #1
 800247a:	fa01 f202 	lsl.w	r2, r1, r2
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d19e      	bne.n	80023c2 <HAL_RCC_OscConfig+0xcfe>
 8002484:	e01e      	b.n	80024c4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e018      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_RCC_OscConfig+0xe0c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800249c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b09e      	sub	sp, #120	; 0x78
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e162      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b90      	ldr	r3, [pc, #576]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d910      	bls.n	800251c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b8d      	ldr	r3, [pc, #564]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	498b      	ldr	r1, [pc, #556]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e14a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002528:	4b82      	ldr	r3, [pc, #520]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	497f      	ldr	r1, [pc, #508]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80dc 	beq.w	8002700 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d13c      	bne.n	80025ca <HAL_RCC_ClockConfig+0xf6>
 8002550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002554:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d102      	bne.n	800257a <HAL_RCC_ClockConfig+0xa6>
 8002574:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	e00f      	b.n	800259a <HAL_RCC_ClockConfig+0xc6>
 800257a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	667b      	str	r3, [r7, #100]	; 0x64
 8002588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258c:	663b      	str	r3, [r7, #96]	; 0x60
 800258e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002596:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800259e:	65ba      	str	r2, [r7, #88]	; 0x58
 80025a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025a2:	fa92 f2a2 	rbit	r2, r2
 80025a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025aa:	fab2 f282 	clz	r2, r2
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f042 0220 	orr.w	r2, r2, #32
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f002 021f 	and.w	r2, r2, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d17b      	bne.n	80026be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0f3      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d13c      	bne.n	800264c <HAL_RCC_ClockConfig+0x178>
 80025d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_ClockConfig+0x128>
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e00f      	b.n	800261c <HAL_RCC_ClockConfig+0x148>
 80025fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002600:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
 800260a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260e:	643b      	str	r3, [r7, #64]	; 0x40
 8002610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002618:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002620:	63ba      	str	r2, [r7, #56]	; 0x38
 8002622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002624:	fa92 f2a2 	rbit	r2, r2
 8002628:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800262a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262c:	fab2 f282 	clz	r2, r2
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f002 021f 	and.w	r2, r2, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f202 	lsl.w	r2, r1, r2
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d13a      	bne.n	80026be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b2      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
 800264c:	2302      	movs	r3, #2
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_RCC_ClockConfig+0x1a0>
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e00d      	b.n	8002690 <HAL_RCC_ClockConfig+0x1bc>
 8002674:	2302      	movs	r3, #2
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	2302      	movs	r3, #2
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2202      	movs	r2, #2
 8002692:	61ba      	str	r2, [r7, #24]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	617a      	str	r2, [r7, #20]
  return result;
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e079      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	491a      	ldr	r1, [pc, #104]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d0:	f7fe fbba 	bl	8000e48 <HAL_GetTick>
 80026d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7fe fbb6 	bl	8000e48 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e061      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d214      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0207 	bic.w	r2, r3, #7
 8002716:	4906      	ldr	r1, [pc, #24]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e040      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
 8002730:	40022000 	.word	0x40022000
 8002734:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	491a      	ldr	r1, [pc, #104]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4912      	ldr	r1, [pc, #72]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002776:	f000 f829 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800277a:	4601      	mov	r1, r0
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002784:	22f0      	movs	r2, #240	; 0xf0
 8002786:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	fa92 f2a2 	rbit	r2, r2
 800278e:	60fa      	str	r2, [r7, #12]
  return result;
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	40d3      	lsrs	r3, r2
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x2ec>)
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	fa21 f303 	lsr.w	r3, r1, r3
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <HAL_RCC_ClockConfig+0x2f0>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_RCC_ClockConfig+0x2f4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fb08 	bl	8000dc0 <HAL_InitTick>
  
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3778      	adds	r7, #120	; 0x78
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080057b8 	.word	0x080057b8
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b08b      	sub	sp, #44	; 0x2c
 80027d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x30>
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x36>
 80027fa:	e03c      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027fe:	623b      	str	r3, [r7, #32]
      break;
 8002800:	e03c      	b.n	800287c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002808:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800280c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	fa92 f2a2 	rbit	r2, r2
 8002814:	607a      	str	r2, [r7, #4]
  return result;
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	40d3      	lsrs	r3, r2
 8002820:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002826:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	220f      	movs	r2, #15
 8002830:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	60fa      	str	r2, [r7, #12]
  return result;
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	40d3      	lsrs	r3, r2
 8002844:	4a14      	ldr	r2, [pc, #80]	; (8002898 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	fbb2 f2f3 	udiv	r2, r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
 8002864:	e004      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_RCC_GetSysClockFreq+0xd0>)
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	623b      	str	r3, [r7, #32]
      break;
 8002874:	e002      	b.n	800287c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002878:	623b      	str	r3, [r7, #32]
      break;
 800287a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287c:	6a3b      	ldr	r3, [r7, #32]
}
 800287e:	4618      	mov	r0, r3
 8002880:	372c      	adds	r7, #44	; 0x2c
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	007a1200 	.word	0x007a1200
 8002894:	080057d0 	.word	0x080057d0
 8002898:	080057e0 	.word	0x080057e0
 800289c:	003d0900 	.word	0x003d0900

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000000 	.word	0x20000000

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028be:	f7ff ffef 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028c2:	4601      	mov	r1, r0
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	603a      	str	r2, [r7, #0]
  return result;
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	40d3      	lsrs	r3, r2
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	080057c8 	.word	0x080057c8

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002902:	f7ff ffcd 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8002906:	4601      	mov	r1, r0
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002910:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002914:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	fa92 f2a2 	rbit	r2, r2
 800291c:	603a      	str	r2, [r7, #0]
  return result;
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	fab2 f282 	clz	r2, r2
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	40d3      	lsrs	r3, r2
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <HAL_RCC_GetPCLK2Freq+0x40>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	080057c8 	.word	0x080057c8

08002940 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b092      	sub	sp, #72	; 0x48
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80cd 	beq.w	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002964:	4b86      	ldr	r3, [pc, #536]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10e      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	4b83      	ldr	r3, [pc, #524]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4a82      	ldr	r2, [pc, #520]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297a:	61d3      	str	r3, [r2, #28]
 800297c:	4b80      	ldr	r3, [pc, #512]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	4b7d      	ldr	r3, [pc, #500]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d118      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299a:	4b7a      	ldr	r3, [pc, #488]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a79      	ldr	r2, [pc, #484]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fa4f 	bl	8000e48 <HAL_GetTick>
 80029aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	e008      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ae:	f7fe fa4b 	bl	8000e48 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b64      	cmp	r3, #100	; 0x64
 80029ba:	d901      	bls.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0db      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	4b70      	ldr	r3, [pc, #448]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029cc:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d07d      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d076      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ea:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b5e      	ldr	r3, [pc, #376]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	461a      	mov	r2, r3
 8002a14:	2301      	movs	r3, #1
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b55      	ldr	r3, [pc, #340]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	461a      	mov	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a3c:	4a50      	ldr	r2, [pc, #320]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a40:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d045      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe f9fc 	bl	8000e48 <HAL_GetTick>
 8002a50:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe f9f8 	bl	8000e48 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e086      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
 8002a76:	2302      	movs	r3, #2
 8002a78:	623b      	str	r3, [r7, #32]
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	61fb      	str	r3, [r7, #28]
  return result;
 8002a82:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d102      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	e007      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	2202      	movs	r2, #2
 8002ab0:	613a      	str	r2, [r7, #16]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	fa92 f2a2 	rbit	r2, r2
 8002ab8:	60fa      	str	r2, [r7, #12]
  return result;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	fab2 f282 	clz	r2, r2
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f002 021f 	and.w	r2, r2, #31
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0bd      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ad8:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4926      	ldr	r1, [pc, #152]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d105      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	491a      	ldr	r1, [pc, #104]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	f023 0210 	bic.w	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4912      	ldr	r1, [pc, #72]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	490b      	ldr	r1, [pc, #44]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3748      	adds	r7, #72	; 0x48
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40007000 	.word	0x40007000
 8002b88:	10908100 	.word	0x10908100

08002b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e049      	b.n	8002c32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fd ff00 	bl	80009b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	f000 fd0a 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d001      	beq.n	8002c54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e038      	b.n	8002cc6 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <HAL_TIM_Base_Start+0x98>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00e      	beq.n	8002c84 <HAL_TIM_Base_Start+0x48>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6e:	d009      	beq.n	8002c84 <HAL_TIM_Base_Start+0x48>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_TIM_Base_Start+0x9c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_TIM_Base_Start+0x48>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <HAL_TIM_Base_Start+0xa0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d115      	bne.n	8002cb0 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_TIM_Base_Start+0xa4>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d015      	beq.n	8002cc2 <HAL_TIM_Base_Start+0x86>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d011      	beq.n	8002cc2 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	e008      	b.n	8002cc2 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e000      	b.n	8002cc4 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40014000 	.word	0x40014000
 8002ce0:	00010007 	.word	0x00010007

08002ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d001      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e040      	b.n	8002d7e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <HAL_TIM_Base_Start_IT+0xa8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d009      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_TIM_Base_Start_IT+0xac>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d115      	bne.n	8002d68 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d015      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x96>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d011      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d66:	e008      	b.n	8002d7a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e000      	b.n	8002d7c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40014000 	.word	0x40014000
 8002d98:	00010007 	.word	0x00010007

08002d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e049      	b.n	8002e42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f841 	bl	8002e4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	f000 fc02 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e097      	b.n	8002fa2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fdd0 	bl	8000a2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002ea2:	f023 0307 	bic.w	r3, r3, #7
 8002ea6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 fb96 	bl	80035e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee0:	f023 0303 	bic.w	r3, r3, #3
 8002ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002efe:	f023 030c 	bic.w	r3, r3, #12
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	011a      	lsls	r2, r3, #4
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	031b      	lsls	r3, r3, #12
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f3c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002f44:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	4313      	orrs	r3, r2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d122      	bne.n	8003006 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d11b      	bne.n	8003006 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f06f 0202 	mvn.w	r2, #2
 8002fd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fadb 	bl	80035a8 <HAL_TIM_IC_CaptureCallback>
 8002ff2:	e005      	b.n	8003000 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 facd 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fade 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b04      	cmp	r3, #4
 8003012:	d122      	bne.n	800305a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d11b      	bne.n	800305a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0204 	mvn.w	r2, #4
 800302a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fab1 	bl	80035a8 <HAL_TIM_IC_CaptureCallback>
 8003046:	e005      	b.n	8003054 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 faa3 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fab4 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d122      	bne.n	80030ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b08      	cmp	r3, #8
 8003074:	d11b      	bne.n	80030ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 0208 	mvn.w	r2, #8
 800307e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2204      	movs	r2, #4
 8003084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fa87 	bl	80035a8 <HAL_TIM_IC_CaptureCallback>
 800309a:	e005      	b.n	80030a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fa79 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa8a 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d122      	bne.n	8003102 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d11b      	bne.n	8003102 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f06f 0210 	mvn.w	r2, #16
 80030d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2208      	movs	r2, #8
 80030d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa5d 	bl	80035a8 <HAL_TIM_IC_CaptureCallback>
 80030ee:	e005      	b.n	80030fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fa4f 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa60 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d10e      	bne.n	800312e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d107      	bne.n	800312e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f06f 0201 	mvn.w	r2, #1
 8003126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd fb9b 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d10e      	bne.n	800315a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d107      	bne.n	800315a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 feed 	bl	8003f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d107      	bne.n	8003188 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fee0 	bl	8003f48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d10e      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d107      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa0e 	bl	80035d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d10e      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0220 	mvn.w	r2, #32
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fea0 	bl	8003f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0fd      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x216>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b14      	cmp	r3, #20
 800320e:	f200 80f0 	bhi.w	80033f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	0800326d 	.word	0x0800326d
 800321c:	080033f3 	.word	0x080033f3
 8003220:	080033f3 	.word	0x080033f3
 8003224:	080033f3 	.word	0x080033f3
 8003228:	080032ad 	.word	0x080032ad
 800322c:	080033f3 	.word	0x080033f3
 8003230:	080033f3 	.word	0x080033f3
 8003234:	080033f3 	.word	0x080033f3
 8003238:	080032ef 	.word	0x080032ef
 800323c:	080033f3 	.word	0x080033f3
 8003240:	080033f3 	.word	0x080033f3
 8003244:	080033f3 	.word	0x080033f3
 8003248:	0800332f 	.word	0x0800332f
 800324c:	080033f3 	.word	0x080033f3
 8003250:	080033f3 	.word	0x080033f3
 8003254:	080033f3 	.word	0x080033f3
 8003258:	08003371 	.word	0x08003371
 800325c:	080033f3 	.word	0x080033f3
 8003260:	080033f3 	.word	0x080033f3
 8003264:	080033f3 	.word	0x080033f3
 8003268:	080033b1 	.word	0x080033b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa2e 	bl	80036d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0208 	orr.w	r2, r2, #8
 8003286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	619a      	str	r2, [r3, #24]
      break;
 80032aa:	e0a3      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fa94 	bl	80037e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6999      	ldr	r1, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	021a      	lsls	r2, r3, #8
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
      break;
 80032ec:	e082      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 faf3 	bl	80038e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0208 	orr.w	r2, r2, #8
 8003308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0204 	bic.w	r2, r2, #4
 8003318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	61da      	str	r2, [r3, #28]
      break;
 800332c:	e062      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fb51 	bl	80039dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69d9      	ldr	r1, [r3, #28]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	61da      	str	r2, [r3, #28]
      break;
 800336e:	e041      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fb94 	bl	8003aa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0204 	bic.w	r2, r2, #4
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033ae:	e021      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fbd2 	bl	8003b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033f0:	e000      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80033f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop

08003408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIM_ConfigClockSource+0x18>
 800341c:	2302      	movs	r3, #2
 800341e:	e0b5      	b.n	800358c <HAL_TIM_ConfigClockSource+0x184>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800344a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345c:	d03e      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0xd4>
 800345e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003462:	f200 8087 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x16c>
 8003466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346a:	f000 8085 	beq.w	8003578 <HAL_TIM_ConfigClockSource+0x170>
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003472:	d87f      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x16c>
 8003474:	2b70      	cmp	r3, #112	; 0x70
 8003476:	d01a      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0xa6>
 8003478:	2b70      	cmp	r3, #112	; 0x70
 800347a:	d87b      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x16c>
 800347c:	2b60      	cmp	r3, #96	; 0x60
 800347e:	d050      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x11a>
 8003480:	2b60      	cmp	r3, #96	; 0x60
 8003482:	d877      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x16c>
 8003484:	2b50      	cmp	r3, #80	; 0x50
 8003486:	d03c      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0xfa>
 8003488:	2b50      	cmp	r3, #80	; 0x50
 800348a:	d873      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x16c>
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d058      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x13a>
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d86f      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x16c>
 8003494:	2b30      	cmp	r3, #48	; 0x30
 8003496:	d064      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x15a>
 8003498:	2b30      	cmp	r3, #48	; 0x30
 800349a:	d86b      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d060      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x15a>
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d867      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d05c      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x15a>
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d05a      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034ac:	e062      	b.n	8003574 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6899      	ldr	r1, [r3, #8]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f000 fc29 	bl	8003d14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	609a      	str	r2, [r3, #8]
      break;
 80034da:	e04e      	b.n	800357a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6899      	ldr	r1, [r3, #8]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f000 fc12 	bl	8003d14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fe:	609a      	str	r2, [r3, #8]
      break;
 8003500:	e03b      	b.n	800357a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	461a      	mov	r2, r3
 8003510:	f000 fb86 	bl	8003c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2150      	movs	r1, #80	; 0x50
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fbdf 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 8003520:	e02b      	b.n	800357a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	461a      	mov	r2, r3
 8003530:	f000 fba5 	bl	8003c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2160      	movs	r1, #96	; 0x60
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fbcf 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 8003540:	e01b      	b.n	800357a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	f000 fb66 	bl	8003c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2140      	movs	r1, #64	; 0x40
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fbbf 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 8003560:	e00b      	b.n	800357a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4619      	mov	r1, r3
 800356c:	4610      	mov	r0, r2
 800356e:	f000 fbb6 	bl	8003cde <TIM_ITRx_SetConfig>
        break;
 8003572:	e002      	b.n	800357a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003574:	bf00      	nop
 8003576:	e000      	b.n	800357a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003578:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a32      	ldr	r2, [pc, #200]	; (80036c0 <TIM_Base_SetConfig+0xdc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0x28>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x28>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <TIM_Base_SetConfig+0xe0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a27      	ldr	r2, [pc, #156]	; (80036c0 <TIM_Base_SetConfig+0xdc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <TIM_Base_SetConfig+0x6a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d00f      	beq.n	800364e <TIM_Base_SetConfig+0x6a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <TIM_Base_SetConfig+0xe0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <TIM_Base_SetConfig+0x6a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <TIM_Base_SetConfig+0xe4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_Base_SetConfig+0x6a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <TIM_Base_SetConfig+0xe8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_Base_SetConfig+0x6a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a21      	ldr	r2, [pc, #132]	; (80036d0 <TIM_Base_SetConfig+0xec>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <TIM_Base_SetConfig+0xdc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00b      	beq.n	80036a4 <TIM_Base_SetConfig+0xc0>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0e      	ldr	r2, [pc, #56]	; (80036c8 <TIM_Base_SetConfig+0xe4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d007      	beq.n	80036a4 <TIM_Base_SetConfig+0xc0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <TIM_Base_SetConfig+0xe8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_Base_SetConfig+0xc0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a0c      	ldr	r2, [pc, #48]	; (80036d0 <TIM_Base_SetConfig+0xec>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d103      	bne.n	80036ac <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	615a      	str	r2, [r3, #20]
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40014000 	.word	0x40014000
 80036cc:	40014400 	.word	0x40014400
 80036d0:	40014800 	.word	0x40014800

080036d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0201 	bic.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f023 0302 	bic.w	r3, r3, #2
 8003720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <TIM_OC1_SetConfig+0xfc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00b      	beq.n	800374c <TIM_OC1_SetConfig+0x78>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <TIM_OC1_SetConfig+0x100>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <TIM_OC1_SetConfig+0x78>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <TIM_OC1_SetConfig+0x104>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_OC1_SetConfig+0x78>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a25      	ldr	r2, [pc, #148]	; (80037dc <TIM_OC1_SetConfig+0x108>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d10c      	bne.n	8003766 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0308 	bic.w	r3, r3, #8
 8003752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <TIM_OC1_SetConfig+0xfc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00b      	beq.n	8003786 <TIM_OC1_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <TIM_OC1_SetConfig+0x100>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d007      	beq.n	8003786 <TIM_OC1_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <TIM_OC1_SetConfig+0x104>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_OC1_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a16      	ldr	r2, [pc, #88]	; (80037dc <TIM_OC1_SetConfig+0x108>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d111      	bne.n	80037aa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800378c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800

080037e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0210 	bic.w	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a24      	ldr	r2, [pc, #144]	; (80038d0 <TIM_OC2_SetConfig+0xf0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10d      	bne.n	8003860 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800384a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <TIM_OC2_SetConfig+0xf0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00b      	beq.n	8003880 <TIM_OC2_SetConfig+0xa0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <TIM_OC2_SetConfig+0xf4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d007      	beq.n	8003880 <TIM_OC2_SetConfig+0xa0>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <TIM_OC2_SetConfig+0xf8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_OC2_SetConfig+0xa0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a18      	ldr	r2, [pc, #96]	; (80038dc <TIM_OC2_SetConfig+0xfc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d113      	bne.n	80038a8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003886:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800388e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400
 80038dc:	40014800 	.word	0x40014800

080038e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800392c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a23      	ldr	r2, [pc, #140]	; (80039cc <TIM_OC3_SetConfig+0xec>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10d      	bne.n	800395e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <TIM_OC3_SetConfig+0xec>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00b      	beq.n	800397e <TIM_OC3_SetConfig+0x9e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <TIM_OC3_SetConfig+0xf0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_OC3_SetConfig+0x9e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <TIM_OC3_SetConfig+0xf4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_OC3_SetConfig+0x9e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <TIM_OC3_SetConfig+0xf8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d113      	bne.n	80039a6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400
 80039d8:	40014800 	.word	0x40014800

080039dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <TIM_OC4_SetConfig+0xb8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_OC4_SetConfig+0x7c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <TIM_OC4_SetConfig+0xbc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_OC4_SetConfig+0x7c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <TIM_OC4_SetConfig+0xc0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_OC4_SetConfig+0x7c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <TIM_OC4_SetConfig+0xc4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d109      	bne.n	8003a6c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	019b      	lsls	r3, r3, #6
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	621a      	str	r2, [r3, #32]
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800

08003aa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ae8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <TIM_OC5_SetConfig+0xac>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_OC5_SetConfig+0x72>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <TIM_OC5_SetConfig+0xb0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_OC5_SetConfig+0x72>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <TIM_OC5_SetConfig+0xb4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_OC5_SetConfig+0x72>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <TIM_OC5_SetConfig+0xb8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d109      	bne.n	8003b2a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	051b      	lsls	r3, r3, #20
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <TIM_OC6_SetConfig+0xb0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00b      	beq.n	8003bd4 <TIM_OC6_SetConfig+0x74>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <TIM_OC6_SetConfig+0xb4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_OC6_SetConfig+0x74>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <TIM_OC6_SetConfig+0xb8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_OC6_SetConfig+0x74>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <TIM_OC6_SetConfig+0xbc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d109      	bne.n	8003be8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	029b      	lsls	r3, r3, #10
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40014400 	.word	0x40014400
 8003c1c:	40014800 	.word	0x40014800

08003c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 030a 	bic.w	r3, r3, #10
 8003c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b087      	sub	sp, #28
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0210 	bic.w	r2, r3, #16
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	031b      	lsls	r3, r3, #12
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f043 0307 	orr.w	r3, r3, #7
 8003d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	609a      	str	r2, [r3, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	021a      	lsls	r2, r3, #8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e054      	b.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a24      	ldr	r2, [pc, #144]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00e      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d009      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10c      	bne.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40014000 	.word	0x40014000

08003e30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e060      	b.n	8003f0e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d115      	bne.n	8003efc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	051b      	lsls	r3, r3, #20
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00

08003f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e040      	b.n	8003ff0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fc fdfe 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fb1e 	bl	80045dc <UART_SetConfig>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e022      	b.n	8003ff0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fc48 	bl	8004848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fccf 	bl	800498c <UART_CheckIdleState>
 8003fee:	4603      	mov	r3, r0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800400c:	2b20      	cmp	r3, #32
 800400e:	f040 8082 	bne.w	8004116 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_UART_Transmit+0x26>
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07a      	b.n	8004118 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_UART_Transmit+0x38>
 800402c:	2302      	movs	r3, #2
 800402e:	e073      	b.n	8004118 <HAL_UART_Transmit+0x120>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2221      	movs	r2, #33	; 0x21
 8004044:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004046:	f7fc feff 	bl	8000e48 <HAL_GetTick>
 800404a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004064:	d108      	bne.n	8004078 <HAL_UART_Transmit+0x80>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	e003      	b.n	8004080 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004088:	e02d      	b.n	80040e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2200      	movs	r2, #0
 8004092:	2180      	movs	r1, #128	; 0x80
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fcc2 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e039      	b.n	8004118 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10b      	bne.n	80040c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	881a      	ldrh	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b6:	b292      	uxth	r2, r2
 80040b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	3302      	adds	r3, #2
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	e008      	b.n	80040d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	781a      	ldrb	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	b292      	uxth	r2, r2
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1cb      	bne.n	800408a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2200      	movs	r2, #0
 80040fa:	2140      	movs	r1, #64	; 0x40
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fc8e 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e005      	b.n	8004118 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	e000      	b.n	8004118 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004116:	2302      	movs	r3, #2
  }
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004132:	2b20      	cmp	r3, #32
 8004134:	d12c      	bne.n	8004190 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <HAL_UART_Receive_IT+0x22>
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e025      	b.n	8004192 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_UART_Receive_IT+0x34>
 8004150:	2302      	movs	r3, #2
 8004152:	e01e      	b.n	8004192 <HAL_UART_Receive_IT+0x72>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800417e:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	461a      	mov	r2, r3
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fcc6 	bl	8004b18 <UART_Start_Receive_IT>
 800418c:	4603      	mov	r3, r0
 800418e:	e000      	b.n	8004192 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	f640 030f 	movw	r3, #2063	; 0x80f
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d113      	bne.n	80041f4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00e      	beq.n	80041f4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d009      	beq.n	80041f4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 81cc 	beq.w	8004582 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
      }
      return;
 80041f2:	e1c6      	b.n	8004582 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80e3 	beq.w	80043c2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4ba5      	ldr	r3, [pc, #660]	; (80044a0 <HAL_UART_IRQHandler+0x304>)
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80d8 	beq.w	80043c2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_UART_IRQHandler+0xa2>
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <HAL_UART_IRQHandler+0xce>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2202      	movs	r2, #2
 8004258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_UART_IRQHandler+0xfa>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2204      	movs	r2, #4
 8004284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428c:	f043 0202 	orr.w	r2, r3, #2
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d015      	beq.n	80042cc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2208      	movs	r2, #8
 80042ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c2:	f043 0208 	orr.w	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d011      	beq.n	80042fa <HAL_UART_IRQHandler+0x15e>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00c      	beq.n	80042fa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8140 	beq.w	8004586 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004330:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d004      	beq.n	800434a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004346:	2b00      	cmp	r3, #0
 8004348:	d031      	beq.n	80043ae <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fc6c 	bl	8004c28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d123      	bne.n	80043a6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800436c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	2b00      	cmp	r3, #0
 8004374:	d013      	beq.n	800439e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4a4a      	ldr	r2, [pc, #296]	; (80044a4 <HAL_UART_IRQHandler+0x308>)
 800437c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4618      	mov	r0, r3
 8004384:	f7fc ffd6 	bl	8001334 <HAL_DMA_Abort_IT>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d017      	beq.n	80043be <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004398:	4610      	mov	r0, r2
 800439a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	e00f      	b.n	80043be <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f906 	bl	80045b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e00b      	b.n	80043be <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f902 	bl	80045b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	e007      	b.n	80043be <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8fe 	bl	80045b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043bc:	e0e3      	b.n	8004586 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043be:	bf00      	nop
    return;
 80043c0:	e0e1      	b.n	8004586 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	f040 80a7 	bne.w	800451a <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80a1 	beq.w	800451a <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 809b 	beq.w	800451a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2210      	movs	r2, #16
 80043ea:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d156      	bne.n	80044a8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004404:	893b      	ldrh	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80bf 	beq.w	800458a <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004412:	893a      	ldrh	r2, [r7, #8]
 8004414:	429a      	cmp	r2, r3
 8004416:	f080 80b8 	bcs.w	800458a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	893a      	ldrh	r2, [r7, #8]
 800441e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b20      	cmp	r3, #32
 800442a:	d02a      	beq.n	8004482 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0210 	bic.w	r2, r2, #16
 8004476:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc ff20 	bl	80012c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800448e:	b29b      	uxth	r3, r3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f894 	bl	80045c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800449c:	e075      	b.n	800458a <HAL_UART_IRQHandler+0x3ee>
 800449e:	bf00      	nop
 80044a0:	04000120 	.word	0x04000120
 80044a4:	08004c87 	.word	0x08004c87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d063      	beq.n	800458e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 80044c6:	897b      	ldrh	r3, [r7, #10]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d060      	beq.n	800458e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044da:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0210 	bic.w	r2, r2, #16
 800450c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800450e:	897b      	ldrh	r3, [r7, #10]
 8004510:	4619      	mov	r1, r3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f856 	bl	80045c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004518:	e039      	b.n	800458e <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <HAL_UART_IRQHandler+0x3a4>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004536:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fca7 	bl	8004e8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800453e:	e029      	b.n	8004594 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01a      	beq.n	8004592 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
    }
    return;
 8004564:	e015      	b.n	8004592 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d011      	beq.n	8004594 <HAL_UART_IRQHandler+0x3f8>
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fb99 	bl	8004cb2 <UART_EndTransmit_IT>
    return;
 8004580:	e008      	b.n	8004594 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004582:	bf00      	nop
 8004584:	e006      	b.n	8004594 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004586:	bf00      	nop
 8004588:	e004      	b.n	8004594 <HAL_UART_IRQHandler+0x3f8>
      return;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <HAL_UART_IRQHandler+0x3f8>
      return;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004592:	bf00      	nop
  }

}
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop

0800459c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4b8a      	ldr	r3, [pc, #552]	; (8004830 <UART_SetConfig+0x254>)
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	6979      	ldr	r1, [r7, #20]
 8004610:	430b      	orrs	r3, r1
 8004612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a78      	ldr	r2, [pc, #480]	; (8004834 <UART_SetConfig+0x258>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d120      	bne.n	800469a <UART_SetConfig+0xbe>
 8004658:	4b77      	ldr	r3, [pc, #476]	; (8004838 <UART_SetConfig+0x25c>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b03      	cmp	r3, #3
 8004662:	d817      	bhi.n	8004694 <UART_SetConfig+0xb8>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x90>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	0800467d 	.word	0x0800467d
 8004670:	08004689 	.word	0x08004689
 8004674:	0800468f 	.word	0x0800468f
 8004678:	08004683 	.word	0x08004683
 800467c:	2300      	movs	r3, #0
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e01d      	b.n	80046be <UART_SetConfig+0xe2>
 8004682:	2302      	movs	r3, #2
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e01a      	b.n	80046be <UART_SetConfig+0xe2>
 8004688:	2304      	movs	r3, #4
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e017      	b.n	80046be <UART_SetConfig+0xe2>
 800468e:	2308      	movs	r3, #8
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e014      	b.n	80046be <UART_SetConfig+0xe2>
 8004694:	2310      	movs	r3, #16
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e011      	b.n	80046be <UART_SetConfig+0xe2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a67      	ldr	r2, [pc, #412]	; (800483c <UART_SetConfig+0x260>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d102      	bne.n	80046aa <UART_SetConfig+0xce>
 80046a4:	2300      	movs	r3, #0
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e009      	b.n	80046be <UART_SetConfig+0xe2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a64      	ldr	r2, [pc, #400]	; (8004840 <UART_SetConfig+0x264>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d102      	bne.n	80046ba <UART_SetConfig+0xde>
 80046b4:	2300      	movs	r3, #0
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e001      	b.n	80046be <UART_SetConfig+0xe2>
 80046ba:	2310      	movs	r3, #16
 80046bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c6:	d15b      	bne.n	8004780 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80046c8:	7ffb      	ldrb	r3, [r7, #31]
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d827      	bhi.n	800471e <UART_SetConfig+0x142>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <UART_SetConfig+0xf8>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	08004701 	.word	0x08004701
 80046dc:	08004709 	.word	0x08004709
 80046e0:	0800471f 	.word	0x0800471f
 80046e4:	0800470f 	.word	0x0800470f
 80046e8:	0800471f 	.word	0x0800471f
 80046ec:	0800471f 	.word	0x0800471f
 80046f0:	0800471f 	.word	0x0800471f
 80046f4:	08004717 	.word	0x08004717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f8:	f7fe f8de 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80046fc:	61b8      	str	r0, [r7, #24]
        break;
 80046fe:	e013      	b.n	8004728 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004700:	f7fe f8fc 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8004704:	61b8      	str	r0, [r7, #24]
        break;
 8004706:	e00f      	b.n	8004728 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004708:	4b4e      	ldr	r3, [pc, #312]	; (8004844 <UART_SetConfig+0x268>)
 800470a:	61bb      	str	r3, [r7, #24]
        break;
 800470c:	e00c      	b.n	8004728 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470e:	f7fe f85d 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8004712:	61b8      	str	r0, [r7, #24]
        break;
 8004714:	e008      	b.n	8004728 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800471a:	61bb      	str	r3, [r7, #24]
        break;
 800471c:	e004      	b.n	8004728 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	77bb      	strb	r3, [r7, #30]
        break;
 8004726:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d074      	beq.n	8004818 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	005a      	lsls	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	441a      	add	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	b29b      	uxth	r3, r3
 8004744:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d916      	bls.n	800477a <UART_SetConfig+0x19e>
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004752:	d212      	bcs.n	800477a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f023 030f 	bic.w	r3, r3, #15
 800475c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	b29b      	uxth	r3, r3
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	b29a      	uxth	r2, r3
 800476a:	89fb      	ldrh	r3, [r7, #14]
 800476c:	4313      	orrs	r3, r2
 800476e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	89fa      	ldrh	r2, [r7, #14]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	e04e      	b.n	8004818 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	77bb      	strb	r3, [r7, #30]
 800477e:	e04b      	b.n	8004818 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004780:	7ffb      	ldrb	r3, [r7, #31]
 8004782:	2b08      	cmp	r3, #8
 8004784:	d827      	bhi.n	80047d6 <UART_SetConfig+0x1fa>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0x1b0>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047b9 	.word	0x080047b9
 8004794:	080047c1 	.word	0x080047c1
 8004798:	080047d7 	.word	0x080047d7
 800479c:	080047c7 	.word	0x080047c7
 80047a0:	080047d7 	.word	0x080047d7
 80047a4:	080047d7 	.word	0x080047d7
 80047a8:	080047d7 	.word	0x080047d7
 80047ac:	080047cf 	.word	0x080047cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7fe f882 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80047b4:	61b8      	str	r0, [r7, #24]
        break;
 80047b6:	e013      	b.n	80047e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7fe f8a0 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80047bc:	61b8      	str	r0, [r7, #24]
        break;
 80047be:	e00f      	b.n	80047e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c0:	4b20      	ldr	r3, [pc, #128]	; (8004844 <UART_SetConfig+0x268>)
 80047c2:	61bb      	str	r3, [r7, #24]
        break;
 80047c4:	e00c      	b.n	80047e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c6:	f7fe f801 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 80047ca:	61b8      	str	r0, [r7, #24]
        break;
 80047cc:	e008      	b.n	80047e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d2:	61bb      	str	r3, [r7, #24]
        break;
 80047d4:	e004      	b.n	80047e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	77bb      	strb	r3, [r7, #30]
        break;
 80047de:	bf00      	nop
    }

    if (pclk != 0U)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	085a      	lsrs	r2, r3, #1
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	441a      	add	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b0f      	cmp	r3, #15
 8004800:	d908      	bls.n	8004814 <UART_SetConfig+0x238>
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004808:	d204      	bcs.n	8004814 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	60da      	str	r2, [r3, #12]
 8004812:	e001      	b.n	8004818 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004824:	7fbb      	ldrb	r3, [r7, #30]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	efff69f3 	.word	0xefff69f3
 8004834:	40013800 	.word	0x40013800
 8004838:	40021000 	.word	0x40021000
 800483c:	40004400 	.word	0x40004400
 8004840:	40004800 	.word	0x40004800
 8004844:	007a1200 	.word	0x007a1200

08004848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01a      	beq.n	800495e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004946:	d10a      	bne.n	800495e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	605a      	str	r2, [r3, #4]
  }
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af02      	add	r7, sp, #8
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800499c:	f7fc fa54 	bl	8000e48 <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d10e      	bne.n	80049ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f82d 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e023      	b.n	8004a16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d10e      	bne.n	80049fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f817 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e00d      	b.n	8004a16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2e:	e05e      	b.n	8004aee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d05a      	beq.n	8004aee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a38:	f7fc fa06 	bl	8000e48 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d302      	bcc.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11b      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e043      	b.n	8004b0e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02c      	beq.n	8004aee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa2:	d124      	bne.n	8004aee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004abc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e00f      	b.n	8004b0e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4013      	ands	r3, r2
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	bf0c      	ite	eq
 8004afe:	2301      	moveq	r3, #1
 8004b00:	2300      	movne	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d091      	beq.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	4613      	mov	r3, r2
 8004b24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4a:	d10e      	bne.n	8004b6a <UART_Start_Receive_IT+0x52>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <UART_Start_Receive_IT+0x48>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b5e:	e02d      	b.n	8004bbc <UART_Start_Receive_IT+0xa4>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	22ff      	movs	r2, #255	; 0xff
 8004b64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b68:	e028      	b.n	8004bbc <UART_Start_Receive_IT+0xa4>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <UART_Start_Receive_IT+0x76>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <UART_Start_Receive_IT+0x6c>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	22ff      	movs	r2, #255	; 0xff
 8004b7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b82:	e01b      	b.n	8004bbc <UART_Start_Receive_IT+0xa4>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	227f      	movs	r2, #127	; 0x7f
 8004b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b8c:	e016      	b.n	8004bbc <UART_Start_Receive_IT+0xa4>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b96:	d10d      	bne.n	8004bb4 <UART_Start_Receive_IT+0x9c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <UART_Start_Receive_IT+0x92>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	227f      	movs	r2, #127	; 0x7f
 8004ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ba8:	e008      	b.n	8004bbc <UART_Start_Receive_IT+0xa4>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	223f      	movs	r2, #63	; 0x3f
 8004bae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bb2:	e003      	b.n	8004bbc <UART_Start_Receive_IT+0xa4>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2222      	movs	r2, #34	; 0x22
 8004bc8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be2:	d107      	bne.n	8004bf4 <UART_Start_Receive_IT+0xdc>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <UART_Start_Receive_IT+0x108>)
 8004bf0:	665a      	str	r2, [r3, #100]	; 0x64
 8004bf2:	e002      	b.n	8004bfa <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <UART_Start_Receive_IT+0x10c>)
 8004bf8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004c10:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	08004db9 	.word	0x08004db9
 8004c24:	08004ce5 	.word	0x08004ce5

08004c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0201 	bic.w	r2, r2, #1
 8004c4e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d107      	bne.n	8004c68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0210 	bic.w	r2, r2, #16
 8004c66:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff fc83 	bl	80045b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fc60 	bl	800459c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cf2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf8:	2b22      	cmp	r3, #34	; 0x22
 8004cfa:	d151      	bne.n	8004da0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d02:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d04:	89bb      	ldrh	r3, [r7, #12]
 8004d06:	b2d9      	uxtb	r1, r3
 8004d08:	89fb      	ldrh	r3, [r7, #14]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	400a      	ands	r2, r1
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d138      	bne.n	8004db0 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d10f      	bne.n	8004d92 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0210 	bic.w	r2, r2, #16
 8004d80:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fc1a 	bl	80045c4 <HAL_UARTEx_RxEventCallback>
 8004d90:	e002      	b.n	8004d98 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fb fd82 	bl	800089c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d9e:	e007      	b.n	8004db0 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0208 	orr.w	r2, r2, #8
 8004dae:	619a      	str	r2, [r3, #24]
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dc6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dcc:	2b22      	cmp	r3, #34	; 0x22
 8004dce:	d151      	bne.n	8004e74 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dd6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dde:	89ba      	ldrh	r2, [r7, #12]
 8004de0:	89fb      	ldrh	r3, [r7, #14]
 8004de2:	4013      	ands	r3, r2
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	1c9a      	adds	r2, r3, #2
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d138      	bne.n	8004e84 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e20:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d10f      	bne.n	8004e66 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0210 	bic.w	r2, r2, #16
 8004e54:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fbb0 	bl	80045c4 <HAL_UARTEx_RxEventCallback>
 8004e64:	e002      	b.n	8004e6c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb fd18 	bl	800089c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e72:	e007      	b.n	8004e84 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0208 	orr.w	r2, r2, #8
 8004e82:	619a      	str	r2, [r3, #24]
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <__errno>:
 8004ea0:	4b01      	ldr	r3, [pc, #4]	; (8004ea8 <__errno+0x8>)
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	2000000c 	.word	0x2000000c

08004eac <__libc_init_array>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	4d0d      	ldr	r5, [pc, #52]	; (8004ee4 <__libc_init_array+0x38>)
 8004eb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ee8 <__libc_init_array+0x3c>)
 8004eb2:	1b64      	subs	r4, r4, r5
 8004eb4:	10a4      	asrs	r4, r4, #2
 8004eb6:	2600      	movs	r6, #0
 8004eb8:	42a6      	cmp	r6, r4
 8004eba:	d109      	bne.n	8004ed0 <__libc_init_array+0x24>
 8004ebc:	4d0b      	ldr	r5, [pc, #44]	; (8004eec <__libc_init_array+0x40>)
 8004ebe:	4c0c      	ldr	r4, [pc, #48]	; (8004ef0 <__libc_init_array+0x44>)
 8004ec0:	f000 fc4e 	bl	8005760 <_init>
 8004ec4:	1b64      	subs	r4, r4, r5
 8004ec6:	10a4      	asrs	r4, r4, #2
 8004ec8:	2600      	movs	r6, #0
 8004eca:	42a6      	cmp	r6, r4
 8004ecc:	d105      	bne.n	8004eda <__libc_init_array+0x2e>
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
 8004ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed4:	4798      	blx	r3
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7ee      	b.n	8004eb8 <__libc_init_array+0xc>
 8004eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ede:	4798      	blx	r3
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	e7f2      	b.n	8004eca <__libc_init_array+0x1e>
 8004ee4:	08005824 	.word	0x08005824
 8004ee8:	08005824 	.word	0x08005824
 8004eec:	08005824 	.word	0x08005824
 8004ef0:	08005828 	.word	0x08005828

08004ef4 <memset>:
 8004ef4:	4402      	add	r2, r0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d100      	bne.n	8004efe <memset+0xa>
 8004efc:	4770      	bx	lr
 8004efe:	f803 1b01 	strb.w	r1, [r3], #1
 8004f02:	e7f9      	b.n	8004ef8 <memset+0x4>

08004f04 <_free_r>:
 8004f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f06:	2900      	cmp	r1, #0
 8004f08:	d048      	beq.n	8004f9c <_free_r+0x98>
 8004f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f0e:	9001      	str	r0, [sp, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f1a1 0404 	sub.w	r4, r1, #4
 8004f16:	bfb8      	it	lt
 8004f18:	18e4      	addlt	r4, r4, r3
 8004f1a:	f000 f8cd 	bl	80050b8 <__malloc_lock>
 8004f1e:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <_free_r+0x9c>)
 8004f20:	9801      	ldr	r0, [sp, #4]
 8004f22:	6813      	ldr	r3, [r2, #0]
 8004f24:	4615      	mov	r5, r2
 8004f26:	b933      	cbnz	r3, 8004f36 <_free_r+0x32>
 8004f28:	6063      	str	r3, [r4, #4]
 8004f2a:	6014      	str	r4, [r2, #0]
 8004f2c:	b003      	add	sp, #12
 8004f2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f32:	f000 b8c7 	b.w	80050c4 <__malloc_unlock>
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	d90b      	bls.n	8004f52 <_free_r+0x4e>
 8004f3a:	6821      	ldr	r1, [r4, #0]
 8004f3c:	1862      	adds	r2, r4, r1
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	bf04      	itt	eq
 8004f42:	681a      	ldreq	r2, [r3, #0]
 8004f44:	685b      	ldreq	r3, [r3, #4]
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	bf04      	itt	eq
 8004f4a:	1852      	addeq	r2, r2, r1
 8004f4c:	6022      	streq	r2, [r4, #0]
 8004f4e:	602c      	str	r4, [r5, #0]
 8004f50:	e7ec      	b.n	8004f2c <_free_r+0x28>
 8004f52:	461a      	mov	r2, r3
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	b10b      	cbz	r3, 8004f5c <_free_r+0x58>
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	d9fa      	bls.n	8004f52 <_free_r+0x4e>
 8004f5c:	6811      	ldr	r1, [r2, #0]
 8004f5e:	1855      	adds	r5, r2, r1
 8004f60:	42a5      	cmp	r5, r4
 8004f62:	d10b      	bne.n	8004f7c <_free_r+0x78>
 8004f64:	6824      	ldr	r4, [r4, #0]
 8004f66:	4421      	add	r1, r4
 8004f68:	1854      	adds	r4, r2, r1
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	6011      	str	r1, [r2, #0]
 8004f6e:	d1dd      	bne.n	8004f2c <_free_r+0x28>
 8004f70:	681c      	ldr	r4, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	6053      	str	r3, [r2, #4]
 8004f76:	4421      	add	r1, r4
 8004f78:	6011      	str	r1, [r2, #0]
 8004f7a:	e7d7      	b.n	8004f2c <_free_r+0x28>
 8004f7c:	d902      	bls.n	8004f84 <_free_r+0x80>
 8004f7e:	230c      	movs	r3, #12
 8004f80:	6003      	str	r3, [r0, #0]
 8004f82:	e7d3      	b.n	8004f2c <_free_r+0x28>
 8004f84:	6825      	ldr	r5, [r4, #0]
 8004f86:	1961      	adds	r1, r4, r5
 8004f88:	428b      	cmp	r3, r1
 8004f8a:	bf04      	itt	eq
 8004f8c:	6819      	ldreq	r1, [r3, #0]
 8004f8e:	685b      	ldreq	r3, [r3, #4]
 8004f90:	6063      	str	r3, [r4, #4]
 8004f92:	bf04      	itt	eq
 8004f94:	1949      	addeq	r1, r1, r5
 8004f96:	6021      	streq	r1, [r4, #0]
 8004f98:	6054      	str	r4, [r2, #4]
 8004f9a:	e7c7      	b.n	8004f2c <_free_r+0x28>
 8004f9c:	b003      	add	sp, #12
 8004f9e:	bd30      	pop	{r4, r5, pc}
 8004fa0:	20000090 	.word	0x20000090

08004fa4 <_malloc_r>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	1ccd      	adds	r5, r1, #3
 8004fa8:	f025 0503 	bic.w	r5, r5, #3
 8004fac:	3508      	adds	r5, #8
 8004fae:	2d0c      	cmp	r5, #12
 8004fb0:	bf38      	it	cc
 8004fb2:	250c      	movcc	r5, #12
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	db01      	blt.n	8004fbe <_malloc_r+0x1a>
 8004fba:	42a9      	cmp	r1, r5
 8004fbc:	d903      	bls.n	8004fc6 <_malloc_r+0x22>
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	6033      	str	r3, [r6, #0]
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc6:	f000 f877 	bl	80050b8 <__malloc_lock>
 8004fca:	4921      	ldr	r1, [pc, #132]	; (8005050 <_malloc_r+0xac>)
 8004fcc:	680a      	ldr	r2, [r1, #0]
 8004fce:	4614      	mov	r4, r2
 8004fd0:	b99c      	cbnz	r4, 8004ffa <_malloc_r+0x56>
 8004fd2:	4f20      	ldr	r7, [pc, #128]	; (8005054 <_malloc_r+0xb0>)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	b923      	cbnz	r3, 8004fe2 <_malloc_r+0x3e>
 8004fd8:	4621      	mov	r1, r4
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f000 f83c 	bl	8005058 <_sbrk_r>
 8004fe0:	6038      	str	r0, [r7, #0]
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f000 f837 	bl	8005058 <_sbrk_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d123      	bne.n	8005036 <_malloc_r+0x92>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	6033      	str	r3, [r6, #0]
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f000 f866 	bl	80050c4 <__malloc_unlock>
 8004ff8:	e7e3      	b.n	8004fc2 <_malloc_r+0x1e>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	1b5b      	subs	r3, r3, r5
 8004ffe:	d417      	bmi.n	8005030 <_malloc_r+0x8c>
 8005000:	2b0b      	cmp	r3, #11
 8005002:	d903      	bls.n	800500c <_malloc_r+0x68>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	441c      	add	r4, r3
 8005008:	6025      	str	r5, [r4, #0]
 800500a:	e004      	b.n	8005016 <_malloc_r+0x72>
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	42a2      	cmp	r2, r4
 8005010:	bf0c      	ite	eq
 8005012:	600b      	streq	r3, [r1, #0]
 8005014:	6053      	strne	r3, [r2, #4]
 8005016:	4630      	mov	r0, r6
 8005018:	f000 f854 	bl	80050c4 <__malloc_unlock>
 800501c:	f104 000b 	add.w	r0, r4, #11
 8005020:	1d23      	adds	r3, r4, #4
 8005022:	f020 0007 	bic.w	r0, r0, #7
 8005026:	1ac2      	subs	r2, r0, r3
 8005028:	d0cc      	beq.n	8004fc4 <_malloc_r+0x20>
 800502a:	1a1b      	subs	r3, r3, r0
 800502c:	50a3      	str	r3, [r4, r2]
 800502e:	e7c9      	b.n	8004fc4 <_malloc_r+0x20>
 8005030:	4622      	mov	r2, r4
 8005032:	6864      	ldr	r4, [r4, #4]
 8005034:	e7cc      	b.n	8004fd0 <_malloc_r+0x2c>
 8005036:	1cc4      	adds	r4, r0, #3
 8005038:	f024 0403 	bic.w	r4, r4, #3
 800503c:	42a0      	cmp	r0, r4
 800503e:	d0e3      	beq.n	8005008 <_malloc_r+0x64>
 8005040:	1a21      	subs	r1, r4, r0
 8005042:	4630      	mov	r0, r6
 8005044:	f000 f808 	bl	8005058 <_sbrk_r>
 8005048:	3001      	adds	r0, #1
 800504a:	d1dd      	bne.n	8005008 <_malloc_r+0x64>
 800504c:	e7cf      	b.n	8004fee <_malloc_r+0x4a>
 800504e:	bf00      	nop
 8005050:	20000090 	.word	0x20000090
 8005054:	20000094 	.word	0x20000094

08005058 <_sbrk_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d06      	ldr	r5, [pc, #24]	; (8005074 <_sbrk_r+0x1c>)
 800505c:	2300      	movs	r3, #0
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	f7fb fe24 	bl	8000cb0 <_sbrk>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_sbrk_r+0x1a>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_sbrk_r+0x1a>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	2000027c 	.word	0x2000027c

08005078 <siprintf>:
 8005078:	b40e      	push	{r1, r2, r3}
 800507a:	b500      	push	{lr}
 800507c:	b09c      	sub	sp, #112	; 0x70
 800507e:	ab1d      	add	r3, sp, #116	; 0x74
 8005080:	9002      	str	r0, [sp, #8]
 8005082:	9006      	str	r0, [sp, #24]
 8005084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005088:	4809      	ldr	r0, [pc, #36]	; (80050b0 <siprintf+0x38>)
 800508a:	9107      	str	r1, [sp, #28]
 800508c:	9104      	str	r1, [sp, #16]
 800508e:	4909      	ldr	r1, [pc, #36]	; (80050b4 <siprintf+0x3c>)
 8005090:	f853 2b04 	ldr.w	r2, [r3], #4
 8005094:	9105      	str	r1, [sp, #20]
 8005096:	6800      	ldr	r0, [r0, #0]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	a902      	add	r1, sp, #8
 800509c:	f000 f874 	bl	8005188 <_svfiprintf_r>
 80050a0:	9b02      	ldr	r3, [sp, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	b01c      	add	sp, #112	; 0x70
 80050a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050ac:	b003      	add	sp, #12
 80050ae:	4770      	bx	lr
 80050b0:	2000000c 	.word	0x2000000c
 80050b4:	ffff0208 	.word	0xffff0208

080050b8 <__malloc_lock>:
 80050b8:	4801      	ldr	r0, [pc, #4]	; (80050c0 <__malloc_lock+0x8>)
 80050ba:	f000 baf9 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 80050be:	bf00      	nop
 80050c0:	20000284 	.word	0x20000284

080050c4 <__malloc_unlock>:
 80050c4:	4801      	ldr	r0, [pc, #4]	; (80050cc <__malloc_unlock+0x8>)
 80050c6:	f000 baf4 	b.w	80056b2 <__retarget_lock_release_recursive>
 80050ca:	bf00      	nop
 80050cc:	20000284 	.word	0x20000284

080050d0 <__ssputs_r>:
 80050d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d4:	688e      	ldr	r6, [r1, #8]
 80050d6:	429e      	cmp	r6, r3
 80050d8:	4682      	mov	sl, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	4690      	mov	r8, r2
 80050de:	461f      	mov	r7, r3
 80050e0:	d838      	bhi.n	8005154 <__ssputs_r+0x84>
 80050e2:	898a      	ldrh	r2, [r1, #12]
 80050e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050e8:	d032      	beq.n	8005150 <__ssputs_r+0x80>
 80050ea:	6825      	ldr	r5, [r4, #0]
 80050ec:	6909      	ldr	r1, [r1, #16]
 80050ee:	eba5 0901 	sub.w	r9, r5, r1
 80050f2:	6965      	ldr	r5, [r4, #20]
 80050f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050fc:	3301      	adds	r3, #1
 80050fe:	444b      	add	r3, r9
 8005100:	106d      	asrs	r5, r5, #1
 8005102:	429d      	cmp	r5, r3
 8005104:	bf38      	it	cc
 8005106:	461d      	movcc	r5, r3
 8005108:	0553      	lsls	r3, r2, #21
 800510a:	d531      	bpl.n	8005170 <__ssputs_r+0xa0>
 800510c:	4629      	mov	r1, r5
 800510e:	f7ff ff49 	bl	8004fa4 <_malloc_r>
 8005112:	4606      	mov	r6, r0
 8005114:	b950      	cbnz	r0, 800512c <__ssputs_r+0x5c>
 8005116:	230c      	movs	r3, #12
 8005118:	f8ca 3000 	str.w	r3, [sl]
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005122:	81a3      	strh	r3, [r4, #12]
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512c:	6921      	ldr	r1, [r4, #16]
 800512e:	464a      	mov	r2, r9
 8005130:	f000 fac0 	bl	80056b4 <memcpy>
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800513a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	6126      	str	r6, [r4, #16]
 8005142:	6165      	str	r5, [r4, #20]
 8005144:	444e      	add	r6, r9
 8005146:	eba5 0509 	sub.w	r5, r5, r9
 800514a:	6026      	str	r6, [r4, #0]
 800514c:	60a5      	str	r5, [r4, #8]
 800514e:	463e      	mov	r6, r7
 8005150:	42be      	cmp	r6, r7
 8005152:	d900      	bls.n	8005156 <__ssputs_r+0x86>
 8005154:	463e      	mov	r6, r7
 8005156:	4632      	mov	r2, r6
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	4641      	mov	r1, r8
 800515c:	f000 fab8 	bl	80056d0 <memmove>
 8005160:	68a3      	ldr	r3, [r4, #8]
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	1b9b      	subs	r3, r3, r6
 8005166:	4432      	add	r2, r6
 8005168:	60a3      	str	r3, [r4, #8]
 800516a:	6022      	str	r2, [r4, #0]
 800516c:	2000      	movs	r0, #0
 800516e:	e7db      	b.n	8005128 <__ssputs_r+0x58>
 8005170:	462a      	mov	r2, r5
 8005172:	f000 fac7 	bl	8005704 <_realloc_r>
 8005176:	4606      	mov	r6, r0
 8005178:	2800      	cmp	r0, #0
 800517a:	d1e1      	bne.n	8005140 <__ssputs_r+0x70>
 800517c:	6921      	ldr	r1, [r4, #16]
 800517e:	4650      	mov	r0, sl
 8005180:	f7ff fec0 	bl	8004f04 <_free_r>
 8005184:	e7c7      	b.n	8005116 <__ssputs_r+0x46>
	...

08005188 <_svfiprintf_r>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	4698      	mov	r8, r3
 800518e:	898b      	ldrh	r3, [r1, #12]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	b09d      	sub	sp, #116	; 0x74
 8005194:	4607      	mov	r7, r0
 8005196:	460d      	mov	r5, r1
 8005198:	4614      	mov	r4, r2
 800519a:	d50e      	bpl.n	80051ba <_svfiprintf_r+0x32>
 800519c:	690b      	ldr	r3, [r1, #16]
 800519e:	b963      	cbnz	r3, 80051ba <_svfiprintf_r+0x32>
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	f7ff feff 	bl	8004fa4 <_malloc_r>
 80051a6:	6028      	str	r0, [r5, #0]
 80051a8:	6128      	str	r0, [r5, #16]
 80051aa:	b920      	cbnz	r0, 80051b6 <_svfiprintf_r+0x2e>
 80051ac:	230c      	movs	r3, #12
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	e0d1      	b.n	800535a <_svfiprintf_r+0x1d2>
 80051b6:	2340      	movs	r3, #64	; 0x40
 80051b8:	616b      	str	r3, [r5, #20]
 80051ba:	2300      	movs	r3, #0
 80051bc:	9309      	str	r3, [sp, #36]	; 0x24
 80051be:	2320      	movs	r3, #32
 80051c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c8:	2330      	movs	r3, #48	; 0x30
 80051ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005374 <_svfiprintf_r+0x1ec>
 80051ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051d2:	f04f 0901 	mov.w	r9, #1
 80051d6:	4623      	mov	r3, r4
 80051d8:	469a      	mov	sl, r3
 80051da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051de:	b10a      	cbz	r2, 80051e4 <_svfiprintf_r+0x5c>
 80051e0:	2a25      	cmp	r2, #37	; 0x25
 80051e2:	d1f9      	bne.n	80051d8 <_svfiprintf_r+0x50>
 80051e4:	ebba 0b04 	subs.w	fp, sl, r4
 80051e8:	d00b      	beq.n	8005202 <_svfiprintf_r+0x7a>
 80051ea:	465b      	mov	r3, fp
 80051ec:	4622      	mov	r2, r4
 80051ee:	4629      	mov	r1, r5
 80051f0:	4638      	mov	r0, r7
 80051f2:	f7ff ff6d 	bl	80050d0 <__ssputs_r>
 80051f6:	3001      	adds	r0, #1
 80051f8:	f000 80aa 	beq.w	8005350 <_svfiprintf_r+0x1c8>
 80051fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fe:	445a      	add	r2, fp
 8005200:	9209      	str	r2, [sp, #36]	; 0x24
 8005202:	f89a 3000 	ldrb.w	r3, [sl]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80a2 	beq.w	8005350 <_svfiprintf_r+0x1c8>
 800520c:	2300      	movs	r3, #0
 800520e:	f04f 32ff 	mov.w	r2, #4294967295
 8005212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005216:	f10a 0a01 	add.w	sl, sl, #1
 800521a:	9304      	str	r3, [sp, #16]
 800521c:	9307      	str	r3, [sp, #28]
 800521e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005222:	931a      	str	r3, [sp, #104]	; 0x68
 8005224:	4654      	mov	r4, sl
 8005226:	2205      	movs	r2, #5
 8005228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800522c:	4851      	ldr	r0, [pc, #324]	; (8005374 <_svfiprintf_r+0x1ec>)
 800522e:	f7fa ffcf 	bl	80001d0 <memchr>
 8005232:	9a04      	ldr	r2, [sp, #16]
 8005234:	b9d8      	cbnz	r0, 800526e <_svfiprintf_r+0xe6>
 8005236:	06d0      	lsls	r0, r2, #27
 8005238:	bf44      	itt	mi
 800523a:	2320      	movmi	r3, #32
 800523c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005240:	0711      	lsls	r1, r2, #28
 8005242:	bf44      	itt	mi
 8005244:	232b      	movmi	r3, #43	; 0x2b
 8005246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800524a:	f89a 3000 	ldrb.w	r3, [sl]
 800524e:	2b2a      	cmp	r3, #42	; 0x2a
 8005250:	d015      	beq.n	800527e <_svfiprintf_r+0xf6>
 8005252:	9a07      	ldr	r2, [sp, #28]
 8005254:	4654      	mov	r4, sl
 8005256:	2000      	movs	r0, #0
 8005258:	f04f 0c0a 	mov.w	ip, #10
 800525c:	4621      	mov	r1, r4
 800525e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005262:	3b30      	subs	r3, #48	; 0x30
 8005264:	2b09      	cmp	r3, #9
 8005266:	d94e      	bls.n	8005306 <_svfiprintf_r+0x17e>
 8005268:	b1b0      	cbz	r0, 8005298 <_svfiprintf_r+0x110>
 800526a:	9207      	str	r2, [sp, #28]
 800526c:	e014      	b.n	8005298 <_svfiprintf_r+0x110>
 800526e:	eba0 0308 	sub.w	r3, r0, r8
 8005272:	fa09 f303 	lsl.w	r3, r9, r3
 8005276:	4313      	orrs	r3, r2
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	46a2      	mov	sl, r4
 800527c:	e7d2      	b.n	8005224 <_svfiprintf_r+0x9c>
 800527e:	9b03      	ldr	r3, [sp, #12]
 8005280:	1d19      	adds	r1, r3, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	9103      	str	r1, [sp, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	bfbb      	ittet	lt
 800528a:	425b      	neglt	r3, r3
 800528c:	f042 0202 	orrlt.w	r2, r2, #2
 8005290:	9307      	strge	r3, [sp, #28]
 8005292:	9307      	strlt	r3, [sp, #28]
 8005294:	bfb8      	it	lt
 8005296:	9204      	strlt	r2, [sp, #16]
 8005298:	7823      	ldrb	r3, [r4, #0]
 800529a:	2b2e      	cmp	r3, #46	; 0x2e
 800529c:	d10c      	bne.n	80052b8 <_svfiprintf_r+0x130>
 800529e:	7863      	ldrb	r3, [r4, #1]
 80052a0:	2b2a      	cmp	r3, #42	; 0x2a
 80052a2:	d135      	bne.n	8005310 <_svfiprintf_r+0x188>
 80052a4:	9b03      	ldr	r3, [sp, #12]
 80052a6:	1d1a      	adds	r2, r3, #4
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	9203      	str	r2, [sp, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bfb8      	it	lt
 80052b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80052b4:	3402      	adds	r4, #2
 80052b6:	9305      	str	r3, [sp, #20]
 80052b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005384 <_svfiprintf_r+0x1fc>
 80052bc:	7821      	ldrb	r1, [r4, #0]
 80052be:	2203      	movs	r2, #3
 80052c0:	4650      	mov	r0, sl
 80052c2:	f7fa ff85 	bl	80001d0 <memchr>
 80052c6:	b140      	cbz	r0, 80052da <_svfiprintf_r+0x152>
 80052c8:	2340      	movs	r3, #64	; 0x40
 80052ca:	eba0 000a 	sub.w	r0, r0, sl
 80052ce:	fa03 f000 	lsl.w	r0, r3, r0
 80052d2:	9b04      	ldr	r3, [sp, #16]
 80052d4:	4303      	orrs	r3, r0
 80052d6:	3401      	adds	r4, #1
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052de:	4826      	ldr	r0, [pc, #152]	; (8005378 <_svfiprintf_r+0x1f0>)
 80052e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052e4:	2206      	movs	r2, #6
 80052e6:	f7fa ff73 	bl	80001d0 <memchr>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d038      	beq.n	8005360 <_svfiprintf_r+0x1d8>
 80052ee:	4b23      	ldr	r3, [pc, #140]	; (800537c <_svfiprintf_r+0x1f4>)
 80052f0:	bb1b      	cbnz	r3, 800533a <_svfiprintf_r+0x1b2>
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	3307      	adds	r3, #7
 80052f6:	f023 0307 	bic.w	r3, r3, #7
 80052fa:	3308      	adds	r3, #8
 80052fc:	9303      	str	r3, [sp, #12]
 80052fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005300:	4433      	add	r3, r6
 8005302:	9309      	str	r3, [sp, #36]	; 0x24
 8005304:	e767      	b.n	80051d6 <_svfiprintf_r+0x4e>
 8005306:	fb0c 3202 	mla	r2, ip, r2, r3
 800530a:	460c      	mov	r4, r1
 800530c:	2001      	movs	r0, #1
 800530e:	e7a5      	b.n	800525c <_svfiprintf_r+0xd4>
 8005310:	2300      	movs	r3, #0
 8005312:	3401      	adds	r4, #1
 8005314:	9305      	str	r3, [sp, #20]
 8005316:	4619      	mov	r1, r3
 8005318:	f04f 0c0a 	mov.w	ip, #10
 800531c:	4620      	mov	r0, r4
 800531e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005322:	3a30      	subs	r2, #48	; 0x30
 8005324:	2a09      	cmp	r2, #9
 8005326:	d903      	bls.n	8005330 <_svfiprintf_r+0x1a8>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0c5      	beq.n	80052b8 <_svfiprintf_r+0x130>
 800532c:	9105      	str	r1, [sp, #20]
 800532e:	e7c3      	b.n	80052b8 <_svfiprintf_r+0x130>
 8005330:	fb0c 2101 	mla	r1, ip, r1, r2
 8005334:	4604      	mov	r4, r0
 8005336:	2301      	movs	r3, #1
 8005338:	e7f0      	b.n	800531c <_svfiprintf_r+0x194>
 800533a:	ab03      	add	r3, sp, #12
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	462a      	mov	r2, r5
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <_svfiprintf_r+0x1f8>)
 8005342:	a904      	add	r1, sp, #16
 8005344:	4638      	mov	r0, r7
 8005346:	f3af 8000 	nop.w
 800534a:	1c42      	adds	r2, r0, #1
 800534c:	4606      	mov	r6, r0
 800534e:	d1d6      	bne.n	80052fe <_svfiprintf_r+0x176>
 8005350:	89ab      	ldrh	r3, [r5, #12]
 8005352:	065b      	lsls	r3, r3, #25
 8005354:	f53f af2c 	bmi.w	80051b0 <_svfiprintf_r+0x28>
 8005358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800535a:	b01d      	add	sp, #116	; 0x74
 800535c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005360:	ab03      	add	r3, sp, #12
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	462a      	mov	r2, r5
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <_svfiprintf_r+0x1f8>)
 8005368:	a904      	add	r1, sp, #16
 800536a:	4638      	mov	r0, r7
 800536c:	f000 f87a 	bl	8005464 <_printf_i>
 8005370:	e7eb      	b.n	800534a <_svfiprintf_r+0x1c2>
 8005372:	bf00      	nop
 8005374:	080057f0 	.word	0x080057f0
 8005378:	080057fa 	.word	0x080057fa
 800537c:	00000000 	.word	0x00000000
 8005380:	080050d1 	.word	0x080050d1
 8005384:	080057f6 	.word	0x080057f6

08005388 <_printf_common>:
 8005388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800538c:	4616      	mov	r6, r2
 800538e:	4699      	mov	r9, r3
 8005390:	688a      	ldr	r2, [r1, #8]
 8005392:	690b      	ldr	r3, [r1, #16]
 8005394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005398:	4293      	cmp	r3, r2
 800539a:	bfb8      	it	lt
 800539c:	4613      	movlt	r3, r2
 800539e:	6033      	str	r3, [r6, #0]
 80053a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053a4:	4607      	mov	r7, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	b10a      	cbz	r2, 80053ae <_printf_common+0x26>
 80053aa:	3301      	adds	r3, #1
 80053ac:	6033      	str	r3, [r6, #0]
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	0699      	lsls	r1, r3, #26
 80053b2:	bf42      	ittt	mi
 80053b4:	6833      	ldrmi	r3, [r6, #0]
 80053b6:	3302      	addmi	r3, #2
 80053b8:	6033      	strmi	r3, [r6, #0]
 80053ba:	6825      	ldr	r5, [r4, #0]
 80053bc:	f015 0506 	ands.w	r5, r5, #6
 80053c0:	d106      	bne.n	80053d0 <_printf_common+0x48>
 80053c2:	f104 0a19 	add.w	sl, r4, #25
 80053c6:	68e3      	ldr	r3, [r4, #12]
 80053c8:	6832      	ldr	r2, [r6, #0]
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	dc26      	bgt.n	800541e <_printf_common+0x96>
 80053d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053d4:	1e13      	subs	r3, r2, #0
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	bf18      	it	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	0692      	lsls	r2, r2, #26
 80053de:	d42b      	bmi.n	8005438 <_printf_common+0xb0>
 80053e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e4:	4649      	mov	r1, r9
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d01e      	beq.n	800542c <_printf_common+0xa4>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	68e5      	ldr	r5, [r4, #12]
 80053f2:	6832      	ldr	r2, [r6, #0]
 80053f4:	f003 0306 	and.w	r3, r3, #6
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	bf08      	it	eq
 80053fc:	1aad      	subeq	r5, r5, r2
 80053fe:	68a3      	ldr	r3, [r4, #8]
 8005400:	6922      	ldr	r2, [r4, #16]
 8005402:	bf0c      	ite	eq
 8005404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005408:	2500      	movne	r5, #0
 800540a:	4293      	cmp	r3, r2
 800540c:	bfc4      	itt	gt
 800540e:	1a9b      	subgt	r3, r3, r2
 8005410:	18ed      	addgt	r5, r5, r3
 8005412:	2600      	movs	r6, #0
 8005414:	341a      	adds	r4, #26
 8005416:	42b5      	cmp	r5, r6
 8005418:	d11a      	bne.n	8005450 <_printf_common+0xc8>
 800541a:	2000      	movs	r0, #0
 800541c:	e008      	b.n	8005430 <_printf_common+0xa8>
 800541e:	2301      	movs	r3, #1
 8005420:	4652      	mov	r2, sl
 8005422:	4649      	mov	r1, r9
 8005424:	4638      	mov	r0, r7
 8005426:	47c0      	blx	r8
 8005428:	3001      	adds	r0, #1
 800542a:	d103      	bne.n	8005434 <_printf_common+0xac>
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005434:	3501      	adds	r5, #1
 8005436:	e7c6      	b.n	80053c6 <_printf_common+0x3e>
 8005438:	18e1      	adds	r1, r4, r3
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	2030      	movs	r0, #48	; 0x30
 800543e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005442:	4422      	add	r2, r4
 8005444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800544c:	3302      	adds	r3, #2
 800544e:	e7c7      	b.n	80053e0 <_printf_common+0x58>
 8005450:	2301      	movs	r3, #1
 8005452:	4622      	mov	r2, r4
 8005454:	4649      	mov	r1, r9
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	3001      	adds	r0, #1
 800545c:	d0e6      	beq.n	800542c <_printf_common+0xa4>
 800545e:	3601      	adds	r6, #1
 8005460:	e7d9      	b.n	8005416 <_printf_common+0x8e>
	...

08005464 <_printf_i>:
 8005464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	460c      	mov	r4, r1
 800546a:	4691      	mov	r9, r2
 800546c:	7e27      	ldrb	r7, [r4, #24]
 800546e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005470:	2f78      	cmp	r7, #120	; 0x78
 8005472:	4680      	mov	r8, r0
 8005474:	469a      	mov	sl, r3
 8005476:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800547a:	d807      	bhi.n	800548c <_printf_i+0x28>
 800547c:	2f62      	cmp	r7, #98	; 0x62
 800547e:	d80a      	bhi.n	8005496 <_printf_i+0x32>
 8005480:	2f00      	cmp	r7, #0
 8005482:	f000 80d8 	beq.w	8005636 <_printf_i+0x1d2>
 8005486:	2f58      	cmp	r7, #88	; 0x58
 8005488:	f000 80a3 	beq.w	80055d2 <_printf_i+0x16e>
 800548c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005494:	e03a      	b.n	800550c <_printf_i+0xa8>
 8005496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800549a:	2b15      	cmp	r3, #21
 800549c:	d8f6      	bhi.n	800548c <_printf_i+0x28>
 800549e:	a001      	add	r0, pc, #4	; (adr r0, 80054a4 <_printf_i+0x40>)
 80054a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054a4:	080054fd 	.word	0x080054fd
 80054a8:	08005511 	.word	0x08005511
 80054ac:	0800548d 	.word	0x0800548d
 80054b0:	0800548d 	.word	0x0800548d
 80054b4:	0800548d 	.word	0x0800548d
 80054b8:	0800548d 	.word	0x0800548d
 80054bc:	08005511 	.word	0x08005511
 80054c0:	0800548d 	.word	0x0800548d
 80054c4:	0800548d 	.word	0x0800548d
 80054c8:	0800548d 	.word	0x0800548d
 80054cc:	0800548d 	.word	0x0800548d
 80054d0:	0800561d 	.word	0x0800561d
 80054d4:	08005541 	.word	0x08005541
 80054d8:	080055ff 	.word	0x080055ff
 80054dc:	0800548d 	.word	0x0800548d
 80054e0:	0800548d 	.word	0x0800548d
 80054e4:	0800563f 	.word	0x0800563f
 80054e8:	0800548d 	.word	0x0800548d
 80054ec:	08005541 	.word	0x08005541
 80054f0:	0800548d 	.word	0x0800548d
 80054f4:	0800548d 	.word	0x0800548d
 80054f8:	08005607 	.word	0x08005607
 80054fc:	680b      	ldr	r3, [r1, #0]
 80054fe:	1d1a      	adds	r2, r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	600a      	str	r2, [r1, #0]
 8005504:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550c:	2301      	movs	r3, #1
 800550e:	e0a3      	b.n	8005658 <_printf_i+0x1f4>
 8005510:	6825      	ldr	r5, [r4, #0]
 8005512:	6808      	ldr	r0, [r1, #0]
 8005514:	062e      	lsls	r6, r5, #24
 8005516:	f100 0304 	add.w	r3, r0, #4
 800551a:	d50a      	bpl.n	8005532 <_printf_i+0xce>
 800551c:	6805      	ldr	r5, [r0, #0]
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	2d00      	cmp	r5, #0
 8005522:	da03      	bge.n	800552c <_printf_i+0xc8>
 8005524:	232d      	movs	r3, #45	; 0x2d
 8005526:	426d      	negs	r5, r5
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552c:	485e      	ldr	r0, [pc, #376]	; (80056a8 <_printf_i+0x244>)
 800552e:	230a      	movs	r3, #10
 8005530:	e019      	b.n	8005566 <_printf_i+0x102>
 8005532:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005536:	6805      	ldr	r5, [r0, #0]
 8005538:	600b      	str	r3, [r1, #0]
 800553a:	bf18      	it	ne
 800553c:	b22d      	sxthne	r5, r5
 800553e:	e7ef      	b.n	8005520 <_printf_i+0xbc>
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	1d18      	adds	r0, r3, #4
 8005546:	6008      	str	r0, [r1, #0]
 8005548:	0628      	lsls	r0, r5, #24
 800554a:	d501      	bpl.n	8005550 <_printf_i+0xec>
 800554c:	681d      	ldr	r5, [r3, #0]
 800554e:	e002      	b.n	8005556 <_printf_i+0xf2>
 8005550:	0669      	lsls	r1, r5, #25
 8005552:	d5fb      	bpl.n	800554c <_printf_i+0xe8>
 8005554:	881d      	ldrh	r5, [r3, #0]
 8005556:	4854      	ldr	r0, [pc, #336]	; (80056a8 <_printf_i+0x244>)
 8005558:	2f6f      	cmp	r7, #111	; 0x6f
 800555a:	bf0c      	ite	eq
 800555c:	2308      	moveq	r3, #8
 800555e:	230a      	movne	r3, #10
 8005560:	2100      	movs	r1, #0
 8005562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005566:	6866      	ldr	r6, [r4, #4]
 8005568:	60a6      	str	r6, [r4, #8]
 800556a:	2e00      	cmp	r6, #0
 800556c:	bfa2      	ittt	ge
 800556e:	6821      	ldrge	r1, [r4, #0]
 8005570:	f021 0104 	bicge.w	r1, r1, #4
 8005574:	6021      	strge	r1, [r4, #0]
 8005576:	b90d      	cbnz	r5, 800557c <_printf_i+0x118>
 8005578:	2e00      	cmp	r6, #0
 800557a:	d04d      	beq.n	8005618 <_printf_i+0x1b4>
 800557c:	4616      	mov	r6, r2
 800557e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005582:	fb03 5711 	mls	r7, r3, r1, r5
 8005586:	5dc7      	ldrb	r7, [r0, r7]
 8005588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800558c:	462f      	mov	r7, r5
 800558e:	42bb      	cmp	r3, r7
 8005590:	460d      	mov	r5, r1
 8005592:	d9f4      	bls.n	800557e <_printf_i+0x11a>
 8005594:	2b08      	cmp	r3, #8
 8005596:	d10b      	bne.n	80055b0 <_printf_i+0x14c>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	07df      	lsls	r7, r3, #31
 800559c:	d508      	bpl.n	80055b0 <_printf_i+0x14c>
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	6861      	ldr	r1, [r4, #4]
 80055a2:	4299      	cmp	r1, r3
 80055a4:	bfde      	ittt	le
 80055a6:	2330      	movle	r3, #48	; 0x30
 80055a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055b0:	1b92      	subs	r2, r2, r6
 80055b2:	6122      	str	r2, [r4, #16]
 80055b4:	f8cd a000 	str.w	sl, [sp]
 80055b8:	464b      	mov	r3, r9
 80055ba:	aa03      	add	r2, sp, #12
 80055bc:	4621      	mov	r1, r4
 80055be:	4640      	mov	r0, r8
 80055c0:	f7ff fee2 	bl	8005388 <_printf_common>
 80055c4:	3001      	adds	r0, #1
 80055c6:	d14c      	bne.n	8005662 <_printf_i+0x1fe>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	b004      	add	sp, #16
 80055ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d2:	4835      	ldr	r0, [pc, #212]	; (80056a8 <_printf_i+0x244>)
 80055d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	680e      	ldr	r6, [r1, #0]
 80055dc:	061f      	lsls	r7, r3, #24
 80055de:	f856 5b04 	ldr.w	r5, [r6], #4
 80055e2:	600e      	str	r6, [r1, #0]
 80055e4:	d514      	bpl.n	8005610 <_printf_i+0x1ac>
 80055e6:	07d9      	lsls	r1, r3, #31
 80055e8:	bf44      	itt	mi
 80055ea:	f043 0320 	orrmi.w	r3, r3, #32
 80055ee:	6023      	strmi	r3, [r4, #0]
 80055f0:	b91d      	cbnz	r5, 80055fa <_printf_i+0x196>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	f023 0320 	bic.w	r3, r3, #32
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	2310      	movs	r3, #16
 80055fc:	e7b0      	b.n	8005560 <_printf_i+0xfc>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f043 0320 	orr.w	r3, r3, #32
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	2378      	movs	r3, #120	; 0x78
 8005608:	4828      	ldr	r0, [pc, #160]	; (80056ac <_printf_i+0x248>)
 800560a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800560e:	e7e3      	b.n	80055d8 <_printf_i+0x174>
 8005610:	065e      	lsls	r6, r3, #25
 8005612:	bf48      	it	mi
 8005614:	b2ad      	uxthmi	r5, r5
 8005616:	e7e6      	b.n	80055e6 <_printf_i+0x182>
 8005618:	4616      	mov	r6, r2
 800561a:	e7bb      	b.n	8005594 <_printf_i+0x130>
 800561c:	680b      	ldr	r3, [r1, #0]
 800561e:	6826      	ldr	r6, [r4, #0]
 8005620:	6960      	ldr	r0, [r4, #20]
 8005622:	1d1d      	adds	r5, r3, #4
 8005624:	600d      	str	r5, [r1, #0]
 8005626:	0635      	lsls	r5, r6, #24
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	d501      	bpl.n	8005630 <_printf_i+0x1cc>
 800562c:	6018      	str	r0, [r3, #0]
 800562e:	e002      	b.n	8005636 <_printf_i+0x1d2>
 8005630:	0671      	lsls	r1, r6, #25
 8005632:	d5fb      	bpl.n	800562c <_printf_i+0x1c8>
 8005634:	8018      	strh	r0, [r3, #0]
 8005636:	2300      	movs	r3, #0
 8005638:	6123      	str	r3, [r4, #16]
 800563a:	4616      	mov	r6, r2
 800563c:	e7ba      	b.n	80055b4 <_printf_i+0x150>
 800563e:	680b      	ldr	r3, [r1, #0]
 8005640:	1d1a      	adds	r2, r3, #4
 8005642:	600a      	str	r2, [r1, #0]
 8005644:	681e      	ldr	r6, [r3, #0]
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	2100      	movs	r1, #0
 800564a:	4630      	mov	r0, r6
 800564c:	f7fa fdc0 	bl	80001d0 <memchr>
 8005650:	b108      	cbz	r0, 8005656 <_printf_i+0x1f2>
 8005652:	1b80      	subs	r0, r0, r6
 8005654:	6060      	str	r0, [r4, #4]
 8005656:	6863      	ldr	r3, [r4, #4]
 8005658:	6123      	str	r3, [r4, #16]
 800565a:	2300      	movs	r3, #0
 800565c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005660:	e7a8      	b.n	80055b4 <_printf_i+0x150>
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	4632      	mov	r2, r6
 8005666:	4649      	mov	r1, r9
 8005668:	4640      	mov	r0, r8
 800566a:	47d0      	blx	sl
 800566c:	3001      	adds	r0, #1
 800566e:	d0ab      	beq.n	80055c8 <_printf_i+0x164>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	079b      	lsls	r3, r3, #30
 8005674:	d413      	bmi.n	800569e <_printf_i+0x23a>
 8005676:	68e0      	ldr	r0, [r4, #12]
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	4298      	cmp	r0, r3
 800567c:	bfb8      	it	lt
 800567e:	4618      	movlt	r0, r3
 8005680:	e7a4      	b.n	80055cc <_printf_i+0x168>
 8005682:	2301      	movs	r3, #1
 8005684:	4632      	mov	r2, r6
 8005686:	4649      	mov	r1, r9
 8005688:	4640      	mov	r0, r8
 800568a:	47d0      	blx	sl
 800568c:	3001      	adds	r0, #1
 800568e:	d09b      	beq.n	80055c8 <_printf_i+0x164>
 8005690:	3501      	adds	r5, #1
 8005692:	68e3      	ldr	r3, [r4, #12]
 8005694:	9903      	ldr	r1, [sp, #12]
 8005696:	1a5b      	subs	r3, r3, r1
 8005698:	42ab      	cmp	r3, r5
 800569a:	dcf2      	bgt.n	8005682 <_printf_i+0x21e>
 800569c:	e7eb      	b.n	8005676 <_printf_i+0x212>
 800569e:	2500      	movs	r5, #0
 80056a0:	f104 0619 	add.w	r6, r4, #25
 80056a4:	e7f5      	b.n	8005692 <_printf_i+0x22e>
 80056a6:	bf00      	nop
 80056a8:	08005801 	.word	0x08005801
 80056ac:	08005812 	.word	0x08005812

080056b0 <__retarget_lock_acquire_recursive>:
 80056b0:	4770      	bx	lr

080056b2 <__retarget_lock_release_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <memcpy>:
 80056b4:	440a      	add	r2, r1
 80056b6:	4291      	cmp	r1, r2
 80056b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056bc:	d100      	bne.n	80056c0 <memcpy+0xc>
 80056be:	4770      	bx	lr
 80056c0:	b510      	push	{r4, lr}
 80056c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ca:	4291      	cmp	r1, r2
 80056cc:	d1f9      	bne.n	80056c2 <memcpy+0xe>
 80056ce:	bd10      	pop	{r4, pc}

080056d0 <memmove>:
 80056d0:	4288      	cmp	r0, r1
 80056d2:	b510      	push	{r4, lr}
 80056d4:	eb01 0402 	add.w	r4, r1, r2
 80056d8:	d902      	bls.n	80056e0 <memmove+0x10>
 80056da:	4284      	cmp	r4, r0
 80056dc:	4623      	mov	r3, r4
 80056de:	d807      	bhi.n	80056f0 <memmove+0x20>
 80056e0:	1e43      	subs	r3, r0, #1
 80056e2:	42a1      	cmp	r1, r4
 80056e4:	d008      	beq.n	80056f8 <memmove+0x28>
 80056e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ee:	e7f8      	b.n	80056e2 <memmove+0x12>
 80056f0:	4402      	add	r2, r0
 80056f2:	4601      	mov	r1, r0
 80056f4:	428a      	cmp	r2, r1
 80056f6:	d100      	bne.n	80056fa <memmove+0x2a>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005702:	e7f7      	b.n	80056f4 <memmove+0x24>

08005704 <_realloc_r>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	4607      	mov	r7, r0
 8005708:	4614      	mov	r4, r2
 800570a:	460e      	mov	r6, r1
 800570c:	b921      	cbnz	r1, 8005718 <_realloc_r+0x14>
 800570e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005712:	4611      	mov	r1, r2
 8005714:	f7ff bc46 	b.w	8004fa4 <_malloc_r>
 8005718:	b922      	cbnz	r2, 8005724 <_realloc_r+0x20>
 800571a:	f7ff fbf3 	bl	8004f04 <_free_r>
 800571e:	4625      	mov	r5, r4
 8005720:	4628      	mov	r0, r5
 8005722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005724:	f000 f814 	bl	8005750 <_malloc_usable_size_r>
 8005728:	42a0      	cmp	r0, r4
 800572a:	d20f      	bcs.n	800574c <_realloc_r+0x48>
 800572c:	4621      	mov	r1, r4
 800572e:	4638      	mov	r0, r7
 8005730:	f7ff fc38 	bl	8004fa4 <_malloc_r>
 8005734:	4605      	mov	r5, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	d0f2      	beq.n	8005720 <_realloc_r+0x1c>
 800573a:	4631      	mov	r1, r6
 800573c:	4622      	mov	r2, r4
 800573e:	f7ff ffb9 	bl	80056b4 <memcpy>
 8005742:	4631      	mov	r1, r6
 8005744:	4638      	mov	r0, r7
 8005746:	f7ff fbdd 	bl	8004f04 <_free_r>
 800574a:	e7e9      	b.n	8005720 <_realloc_r+0x1c>
 800574c:	4635      	mov	r5, r6
 800574e:	e7e7      	b.n	8005720 <_realloc_r+0x1c>

08005750 <_malloc_usable_size_r>:
 8005750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005754:	1f18      	subs	r0, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfbc      	itt	lt
 800575a:	580b      	ldrlt	r3, [r1, r0]
 800575c:	18c0      	addlt	r0, r0, r3
 800575e:	4770      	bx	lr

08005760 <_init>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr

0800576c <_fini>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	bf00      	nop
 8005770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005772:	bc08      	pop	{r3}
 8005774:	469e      	mov	lr, r3
 8005776:	4770      	bx	lr
